
voting_machine.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000034d2  00003566  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080008e  0080008e  00003594  2**0
                  ALLOC
  3 .stab         0000258c  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e81  00000000  00000000  00005b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000069a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006b01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006c90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008cd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ad58  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000aed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b19a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 39       	cpi	r26, 0x96	; 150
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 19 	call	0x33c0	; 0x33c0 <main>
      8a:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 13 1a 	jmp	0x3426	; 0x3426 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 fb 19 	jmp	0x33f6	; 0x33f6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <init_function>:





void init_function(void){
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	 LCD_init();
     ca6:	0e 94 93 0b 	call	0x1726	; 0x1726 <LCD_init>
	 LCD_clearScreen();
     caa:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_clearScreen>
}
     cae:	cf 91       	pop	r28
     cb0:	df 91       	pop	r29
     cb2:	08 95       	ret

00000cb4 <welcome_screen>:


void welcome_screen(void){
     cb4:	df 93       	push	r29
     cb6:	cf 93       	push	r28
     cb8:	cd b7       	in	r28, 0x3d	; 61
     cba:	de b7       	in	r29, 0x3e	; 62
     cbc:	2e 97       	sbiw	r28, 0x0e	; 14
     cbe:	0f b6       	in	r0, 0x3f	; 63
     cc0:	f8 94       	cli
     cc2:	de bf       	out	0x3e, r29	; 62
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	cd bf       	out	0x3d, r28	; 61
	 LCD_clearScreen();
     cc8:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_clearScreen>
	 LCD_displayString("Welcome ");
     ccc:	80 e6       	ldi	r24, 0x60	; 96
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 2f 19 	call	0x325e	; 0x325e <LCD_displayString>
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	aa e7       	ldi	r26, 0x7A	; 122
     cda:	b4 e4       	ldi	r27, 0x44	; 68
     cdc:	8b 87       	std	Y+11, r24	; 0x0b
     cde:	9c 87       	std	Y+12, r25	; 0x0c
     ce0:	ad 87       	std	Y+13, r26	; 0x0d
     ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
     ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
     ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
     cea:	9e 85       	ldd	r25, Y+14	; 0x0e
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a e7       	ldi	r20, 0x7A	; 122
     cf2:	55 e4       	ldi	r21, 0x45	; 69
     cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	8f 83       	std	Y+7, r24	; 0x07
     cfe:	98 87       	std	Y+8, r25	; 0x08
     d00:	a9 87       	std	Y+9, r26	; 0x09
     d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d04:	6f 81       	ldd	r22, Y+7	; 0x07
     d06:	78 85       	ldd	r23, Y+8	; 0x08
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e8       	ldi	r20, 0x80	; 128
     d12:	5f e3       	ldi	r21, 0x3F	; 63
     d14:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     d18:	88 23       	and	r24, r24
     d1a:	2c f4       	brge	.+10     	; 0xd26 <welcome_screen+0x72>
		__ticks = 1;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9e 83       	std	Y+6, r25	; 0x06
     d22:	8d 83       	std	Y+5, r24	; 0x05
     d24:	3f c0       	rjmp	.+126    	; 0xda4 <welcome_screen+0xf0>
	else if (__tmp > 65535)
     d26:	6f 81       	ldd	r22, Y+7	; 0x07
     d28:	78 85       	ldd	r23, Y+8	; 0x08
     d2a:	89 85       	ldd	r24, Y+9	; 0x09
     d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	3f ef       	ldi	r19, 0xFF	; 255
     d32:	4f e7       	ldi	r20, 0x7F	; 127
     d34:	57 e4       	ldi	r21, 0x47	; 71
     d36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     d3a:	18 16       	cp	r1, r24
     d3c:	4c f5       	brge	.+82     	; 0xd90 <welcome_screen+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     d40:	7c 85       	ldd	r23, Y+12	; 0x0c
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	20 e0       	ldi	r18, 0x00	; 0
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	40 e2       	ldi	r20, 0x20	; 32
     d4c:	51 e4       	ldi	r21, 0x41	; 65
     d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d52:	dc 01       	movw	r26, r24
     d54:	cb 01       	movw	r24, r22
     d56:	bc 01       	movw	r22, r24
     d58:	cd 01       	movw	r24, r26
     d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	0f c0       	rjmp	.+30     	; 0xd86 <welcome_screen+0xd2>
     d68:	80 e9       	ldi	r24, 0x90	; 144
     d6a:	91 e0       	ldi	r25, 0x01	; 1
     d6c:	9c 83       	std	Y+4, r25	; 0x04
     d6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	9c 81       	ldd	r25, Y+4	; 0x04
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <welcome_screen+0xc0>
     d78:	9c 83       	std	Y+4, r25	; 0x04
     d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d7c:	8d 81       	ldd	r24, Y+5	; 0x05
     d7e:	9e 81       	ldd	r25, Y+6	; 0x06
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	9e 83       	std	Y+6, r25	; 0x06
     d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d86:	8d 81       	ldd	r24, Y+5	; 0x05
     d88:	9e 81       	ldd	r25, Y+6	; 0x06
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	69 f7       	brne	.-38     	; 0xd68 <welcome_screen+0xb4>
     d8e:	14 c0       	rjmp	.+40     	; 0xdb8 <welcome_screen+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d90:	6f 81       	ldd	r22, Y+7	; 0x07
     d92:	78 85       	ldd	r23, Y+8	; 0x08
     d94:	89 85       	ldd	r24, Y+9	; 0x09
     d96:	9a 85       	ldd	r25, Y+10	; 0x0a
     d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	9e 83       	std	Y+6, r25	; 0x06
     da2:	8d 83       	std	Y+5, r24	; 0x05
     da4:	8d 81       	ldd	r24, Y+5	; 0x05
     da6:	9e 81       	ldd	r25, Y+6	; 0x06
     da8:	9a 83       	std	Y+2, r25	; 0x02
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	9a 81       	ldd	r25, Y+2	; 0x02
     db0:	01 97       	sbiw	r24, 0x01	; 1
     db2:	f1 f7       	brne	.-4      	; 0xdb0 <welcome_screen+0xfc>
     db4:	9a 83       	std	Y+2, r25	; 0x02
     db6:	89 83       	std	Y+1, r24	; 0x01
	 _delay_ms(1000);
	 LCD_clearScreen();
     db8:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_clearScreen>
	 intial_screen();
     dbc:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <intial_screen>
}
     dc0:	2e 96       	adiw	r28, 0x0e	; 14
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <intial_screen>:

static void intial_screen(void){
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62

	LCD_displayStringRowColumn(0,0,"A=0");
     dda:	29 e6       	ldi	r18, 0x69	; 105
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	a9 01       	movw	r20, r18
     de4:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(0,10,"B=0");
     de8:	2d e6       	ldi	r18, 0x6D	; 109
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	6a e0       	ldi	r22, 0x0A	; 10
     df0:	a9 01       	movw	r20, r18
     df2:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"C=0");
     df6:	21 e7       	ldi	r18, 0x71	; 113
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	a9 01       	movw	r20, r18
     e00:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,10,"D=0");
     e04:	25 e7       	ldi	r18, 0x75	; 117
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	6a e0       	ldi	r22, 0x0A	; 10
     e0c:	a9 01       	movw	r20, r18
     e0e:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	check_voting();
     e12:	0e 94 49 07 	call	0xe92	; 0xe92 <check_voting>
}
     e16:	cf 91       	pop	r28
     e18:	df 91       	pop	r29
     e1a:	08 95       	ret

00000e1c <main_menu>:



static void main_menu(void){
     e1c:	df 93       	push	r29
     e1e:	cf 93       	push	r28
     e20:	cd b7       	in	r28, 0x3d	; 61
     e22:	de b7       	in	r29, 0x3e	; 62

	LCD_displayStringRowColumn(0,0,"A=");
     e24:	29 e7       	ldi	r18, 0x79	; 121
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	60 e0       	ldi	r22, 0x00	; 0
     e2c:	a9 01       	movw	r20, r18
     e2e:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	LCD_integerToString(countA);
     e32:	80 91 8e 00 	lds	r24, 0x008E
     e36:	90 91 8f 00 	lds	r25, 0x008F
     e3a:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_integerToString>
	LCD_displayStringRowColumn(0,10,"B=");
     e3e:	2c e7       	ldi	r18, 0x7C	; 124
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	6a e0       	ldi	r22, 0x0A	; 10
     e46:	a9 01       	movw	r20, r18
     e48:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	LCD_integerToString(countB);
     e4c:	80 91 90 00 	lds	r24, 0x0090
     e50:	90 91 91 00 	lds	r25, 0x0091
     e54:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_integerToString>
	LCD_displayStringRowColumn(1,0,"C=");
     e58:	2f e7       	ldi	r18, 0x7F	; 127
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	a9 01       	movw	r20, r18
     e62:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	LCD_integerToString(countC);
     e66:	80 91 92 00 	lds	r24, 0x0092
     e6a:	90 91 93 00 	lds	r25, 0x0093
     e6e:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_integerToString>
	LCD_displayStringRowColumn(1,10,"D=");
     e72:	22 e8       	ldi	r18, 0x82	; 130
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	6a e0       	ldi	r22, 0x0A	; 10
     e7a:	a9 01       	movw	r20, r18
     e7c:	0e 94 bd 19 	call	0x337a	; 0x337a <LCD_displayStringRowColumn>
	LCD_integerToString(countD);
     e80:	80 91 94 00 	lds	r24, 0x0094
     e84:	90 91 95 00 	lds	r25, 0x0095
     e88:	0e 94 58 19 	call	0x32b0	; 0x32b0 <LCD_integerToString>

}
     e8c:	cf 91       	pop	r28
     e8e:	df 91       	pop	r29
     e90:	08 95       	ret

00000e92 <check_voting>:
static void check_voting(void){
     e92:	df 93       	push	r29
     e94:	cf 93       	push	r28
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	60 97       	sbiw	r28, 0x10	; 16
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61

	countA=0;countB=0;countC=0;countD=0;
     ea6:	10 92 8f 00 	sts	0x008F, r1
     eaa:	10 92 8e 00 	sts	0x008E, r1
     eae:	10 92 91 00 	sts	0x0091, r1
     eb2:	10 92 90 00 	sts	0x0090, r1
     eb6:	10 92 93 00 	sts	0x0093, r1
     eba:	10 92 92 00 	sts	0x0092, r1
     ebe:	10 92 95 00 	sts	0x0095, r1
     ec2:	10 92 94 00 	sts	0x0094, r1

	for(uint8 i=0;i<20;i++){
     ec6:	18 8a       	std	Y+16, r1	; 0x10
     ec8:	b3 c0       	rjmp	.+358    	; 0x1030 <check_voting+0x19e>
		uint8 state	=KEYPAD_getPressedKey();
     eca:	0e 94 24 0b 	call	0x1648	; 0x1648 <KEYPAD_getPressedKey>
     ece:	8f 87       	std	Y+15, r24	; 0x0f
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	aa ef       	ldi	r26, 0xFA	; 250
     ed6:	b3 e4       	ldi	r27, 0x43	; 67
     ed8:	8b 87       	std	Y+11, r24	; 0x0b
     eda:	9c 87       	std	Y+12, r25	; 0x0c
     edc:	ad 87       	std	Y+13, r26	; 0x0d
     ede:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee8:	20 e0       	ldi	r18, 0x00	; 0
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	4a e7       	ldi	r20, 0x7A	; 122
     eee:	55 e4       	ldi	r21, 0x45	; 69
     ef0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	8f 83       	std	Y+7, r24	; 0x07
     efa:	98 87       	std	Y+8, r25	; 0x08
     efc:	a9 87       	std	Y+9, r26	; 0x09
     efe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f00:	6f 81       	ldd	r22, Y+7	; 0x07
     f02:	78 85       	ldd	r23, Y+8	; 0x08
     f04:	89 85       	ldd	r24, Y+9	; 0x09
     f06:	9a 85       	ldd	r25, Y+10	; 0x0a
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e8       	ldi	r20, 0x80	; 128
     f0e:	5f e3       	ldi	r21, 0x3F	; 63
     f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f14:	88 23       	and	r24, r24
     f16:	2c f4       	brge	.+10     	; 0xf22 <check_voting+0x90>
		__ticks = 1;
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	9e 83       	std	Y+6, r25	; 0x06
     f1e:	8d 83       	std	Y+5, r24	; 0x05
     f20:	3f c0       	rjmp	.+126    	; 0xfa0 <check_voting+0x10e>
	else if (__tmp > 65535)
     f22:	6f 81       	ldd	r22, Y+7	; 0x07
     f24:	78 85       	ldd	r23, Y+8	; 0x08
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	3f ef       	ldi	r19, 0xFF	; 255
     f2e:	4f e7       	ldi	r20, 0x7F	; 127
     f30:	57 e4       	ldi	r21, 0x47	; 71
     f32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f36:	18 16       	cp	r1, r24
     f38:	4c f5       	brge	.+82     	; 0xf8c <check_voting+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f40:	9e 85       	ldd	r25, Y+14	; 0x0e
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	40 e2       	ldi	r20, 0x20	; 32
     f48:	51 e4       	ldi	r21, 0x41	; 65
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	bc 01       	movw	r22, r24
     f54:	cd 01       	movw	r24, r26
     f56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f5a:	dc 01       	movw	r26, r24
     f5c:	cb 01       	movw	r24, r22
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	8d 83       	std	Y+5, r24	; 0x05
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <check_voting+0xf0>
     f64:	80 e9       	ldi	r24, 0x90	; 144
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	9c 83       	std	Y+4, r25	; 0x04
     f6a:	8b 83       	std	Y+3, r24	; 0x03
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <check_voting+0xde>
     f74:	9c 83       	std	Y+4, r25	; 0x04
     f76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f78:	8d 81       	ldd	r24, Y+5	; 0x05
     f7a:	9e 81       	ldd	r25, Y+6	; 0x06
     f7c:	01 97       	sbiw	r24, 0x01	; 1
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	69 f7       	brne	.-38     	; 0xf64 <check_voting+0xd2>
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <check_voting+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8c:	6f 81       	ldd	r22, Y+7	; 0x07
     f8e:	78 85       	ldd	r23, Y+8	; 0x08
     f90:	89 85       	ldd	r24, Y+9	; 0x09
     f92:	9a 85       	ldd	r25, Y+10	; 0x0a
     f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f98:	dc 01       	movw	r26, r24
     f9a:	cb 01       	movw	r24, r22
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	8d 81       	ldd	r24, Y+5	; 0x05
     fa2:	9e 81       	ldd	r25, Y+6	; 0x06
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	01 97       	sbiw	r24, 0x01	; 1
     fae:	f1 f7       	brne	.-4      	; 0xfac <check_voting+0x11a>
     fb0:	9a 83       	std	Y+2, r25	; 0x02
     fb2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		 if( state==1){
     fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	51 f4       	brne	.+20     	; 0xfce <check_voting+0x13c>
			countA=countA+1;
     fba:	80 91 8e 00 	lds	r24, 0x008E
     fbe:	90 91 8f 00 	lds	r25, 0x008F
     fc2:	01 96       	adiw	r24, 0x01	; 1
     fc4:	90 93 8f 00 	sts	0x008F, r25
     fc8:	80 93 8e 00 	sts	0x008E, r24
     fcc:	2a c0       	rjmp	.+84     	; 0x1022 <check_voting+0x190>
		}
		 else if( state==2){
     fce:	8f 85       	ldd	r24, Y+15	; 0x0f
     fd0:	82 30       	cpi	r24, 0x02	; 2
     fd2:	51 f4       	brne	.+20     	; 0xfe8 <check_voting+0x156>
			countB=countB+1;
     fd4:	80 91 90 00 	lds	r24, 0x0090
     fd8:	90 91 91 00 	lds	r25, 0x0091
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	90 93 91 00 	sts	0x0091, r25
     fe2:	80 93 90 00 	sts	0x0090, r24
     fe6:	1d c0       	rjmp	.+58     	; 0x1022 <check_voting+0x190>
		}
		else if( state==3){
     fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
     fea:	83 30       	cpi	r24, 0x03	; 3
     fec:	51 f4       	brne	.+20     	; 0x1002 <check_voting+0x170>
			countC=countC+1;
     fee:	80 91 92 00 	lds	r24, 0x0092
     ff2:	90 91 93 00 	lds	r25, 0x0093
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	90 93 93 00 	sts	0x0093, r25
     ffc:	80 93 92 00 	sts	0x0092, r24
    1000:	10 c0       	rjmp	.+32     	; 0x1022 <check_voting+0x190>
		}
		else if( state==4){
    1002:	8f 85       	ldd	r24, Y+15	; 0x0f
    1004:	84 30       	cpi	r24, 0x04	; 4
    1006:	51 f4       	brne	.+20     	; 0x101c <check_voting+0x18a>
			countD=countD+1;
    1008:	80 91 94 00 	lds	r24, 0x0094
    100c:	90 91 95 00 	lds	r25, 0x0095
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	90 93 95 00 	sts	0x0095, r25
    1016:	80 93 94 00 	sts	0x0094, r24
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <check_voting+0x190>
		}
		else if( state==5){
    101c:	8f 85       	ldd	r24, Y+15	; 0x0f
    101e:	85 30       	cpi	r24, 0x05	; 5
    1020:	59 f0       	breq	.+22     	; 0x1038 <check_voting+0x1a6>
			return 0;} // @suppress("Unused return value")

	LCD_clearScreen();
    1022:	0e 94 d6 19 	call	0x33ac	; 0x33ac <LCD_clearScreen>
	main_menu();
    1026:	0e 94 0e 07 	call	0xe1c	; 0xe1c <main_menu>
}
static void check_voting(void){

	countA=0;countB=0;countC=0;countD=0;

	for(uint8 i=0;i<20;i++){
    102a:	88 89       	ldd	r24, Y+16	; 0x10
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	88 8b       	std	Y+16, r24	; 0x10
    1030:	88 89       	ldd	r24, Y+16	; 0x10
    1032:	84 31       	cpi	r24, 0x14	; 20
    1034:	08 f4       	brcc	.+2      	; 0x1038 <check_voting+0x1a6>
    1036:	49 cf       	rjmp	.-366    	; 0xeca <check_voting+0x38>
			return 0;} // @suppress("Unused return value")

	LCD_clearScreen();
	main_menu();
}
}
    1038:	60 96       	adiw	r28, 0x10	; 16
    103a:	0f b6       	in	r0, 0x3f	; 63
    103c:	f8 94       	cli
    103e:	de bf       	out	0x3e, r29	; 62
    1040:	0f be       	out	0x3f, r0	; 63
    1042:	cd bf       	out	0x3d, r28	; 61
    1044:	cf 91       	pop	r28
    1046:	df 91       	pop	r29
    1048:	08 95       	ret

0000104a <GPIO_setupPinDirection>:
/*
 * Description :
 * A function to set pin direction if it was input pin or output pin
 */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	27 97       	sbiw	r28, 0x07	; 7
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	6a 83       	std	Y+2, r22	; 0x02
    1062:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	88 30       	cpi	r24, 0x08	; 8
    1068:	08 f0       	brcs	.+2      	; 0x106c <GPIO_setupPinDirection+0x22>
    106a:	d2 c0       	rjmp	.+420    	; 0x1210 <GPIO_setupPinDirection+0x1c6>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	81 30       	cpi	r24, 0x01	; 1
    1070:	09 f0       	breq	.+2      	; 0x1074 <GPIO_setupPinDirection+0x2a>
    1072:	63 c0       	rjmp	.+198    	; 0x113a <GPIO_setupPinDirection+0xf0>
		{
			switch(port_num)
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	3f 83       	std	Y+7, r19	; 0x07
    107c:	2e 83       	std	Y+6, r18	; 0x06
    107e:	8e 81       	ldd	r24, Y+6	; 0x06
    1080:	9f 81       	ldd	r25, Y+7	; 0x07
    1082:	81 30       	cpi	r24, 0x01	; 1
    1084:	91 05       	cpc	r25, r1
    1086:	e9 f0       	breq	.+58     	; 0x10c2 <GPIO_setupPinDirection+0x78>
    1088:	2e 81       	ldd	r18, Y+6	; 0x06
    108a:	3f 81       	ldd	r19, Y+7	; 0x07
    108c:	22 30       	cpi	r18, 0x02	; 2
    108e:	31 05       	cpc	r19, r1
    1090:	61 f1       	breq	.+88     	; 0x10ea <GPIO_setupPinDirection+0xa0>
    1092:	8e 81       	ldd	r24, Y+6	; 0x06
    1094:	9f 81       	ldd	r25, Y+7	; 0x07
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	e1 f5       	brne	.+120    	; 0x1112 <GPIO_setupPinDirection+0xc8>
			{
			case PORTA_ID:
				DDRA|=(1<<pin_num);
    109a:	aa e3       	ldi	r26, 0x3A	; 58
    109c:	b0 e0       	ldi	r27, 0x00	; 0
    109e:	ea e3       	ldi	r30, 0x3A	; 58
    10a0:	f0 e0       	ldi	r31, 0x00	; 0
    10a2:	80 81       	ld	r24, Z
    10a4:	48 2f       	mov	r20, r24
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	02 2e       	mov	r0, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_setupPinDirection+0x6e>
    10b4:	88 0f       	add	r24, r24
    10b6:	99 1f       	adc	r25, r25
    10b8:	0a 94       	dec	r0
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_setupPinDirection+0x6a>
    10bc:	84 2b       	or	r24, r20
    10be:	8c 93       	st	X, r24
    10c0:	a7 c0       	rjmp	.+334    	; 0x1210 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB|=(1<<pin_num);
    10c2:	a7 e3       	ldi	r26, 0x37	; 55
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e7 e3       	ldi	r30, 0x37	; 55
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <GPIO_setupPinDirection+0x96>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <GPIO_setupPinDirection+0x92>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	93 c0       	rjmp	.+294    	; 0x1210 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC|=(1<<pin_num);
    10ea:	a4 e3       	ldi	r26, 0x34	; 52
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e4 e3       	ldi	r30, 0x34	; 52
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <GPIO_setupPinDirection+0xbe>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <GPIO_setupPinDirection+0xba>
    110c:	84 2b       	or	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	7f c0       	rjmp	.+254    	; 0x1210 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD|=(1<<pin_num);
    1112:	a1 e3       	ldi	r26, 0x31	; 49
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	e1 e3       	ldi	r30, 0x31	; 49
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	8a 81       	ldd	r24, Y+2	; 0x02
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	02 2e       	mov	r0, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <GPIO_setupPinDirection+0xe6>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	0a 94       	dec	r0
    1132:	e2 f7       	brpl	.-8      	; 0x112c <GPIO_setupPinDirection+0xe2>
    1134:	84 2b       	or	r24, r20
    1136:	8c 93       	st	X, r24
    1138:	6b c0       	rjmp	.+214    	; 0x1210 <GPIO_setupPinDirection+0x1c6>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 23       	and	r24, r24
    113e:	09 f0       	breq	.+2      	; 0x1142 <GPIO_setupPinDirection+0xf8>
    1140:	67 c0       	rjmp	.+206    	; 0x1210 <GPIO_setupPinDirection+0x1c6>
		{
			switch(port_num)
    1142:	89 81       	ldd	r24, Y+1	; 0x01
    1144:	28 2f       	mov	r18, r24
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	3d 83       	std	Y+5, r19	; 0x05
    114a:	2c 83       	std	Y+4, r18	; 0x04
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	91 05       	cpc	r25, r1
    1154:	f9 f0       	breq	.+62     	; 0x1194 <GPIO_setupPinDirection+0x14a>
    1156:	2c 81       	ldd	r18, Y+4	; 0x04
    1158:	3d 81       	ldd	r19, Y+5	; 0x05
    115a:	22 30       	cpi	r18, 0x02	; 2
    115c:	31 05       	cpc	r19, r1
    115e:	79 f1       	breq	.+94     	; 0x11be <GPIO_setupPinDirection+0x174>
    1160:	8c 81       	ldd	r24, Y+4	; 0x04
    1162:	9d 81       	ldd	r25, Y+5	; 0x05
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	09 f0       	breq	.+2      	; 0x116a <GPIO_setupPinDirection+0x120>
    1168:	3f c0       	rjmp	.+126    	; 0x11e8 <GPIO_setupPinDirection+0x19e>
			{
			case PORTA_ID:
				DDRA&=~(1<<pin_num);
    116a:	aa e3       	ldi	r26, 0x3A	; 58
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	ea e3       	ldi	r30, 0x3A	; 58
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_setupPinDirection+0x13e>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_setupPinDirection+0x13a>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	3e c0       	rjmp	.+124    	; 0x1210 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTB_ID:
				DDRB&=~(1<<pin_num);
    1194:	a7 e3       	ldi	r26, 0x37	; 55
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e7 e3       	ldi	r30, 0x37	; 55
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_setupPinDirection+0x168>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_setupPinDirection+0x164>
    11b6:	80 95       	com	r24
    11b8:	84 23       	and	r24, r20
    11ba:	8c 93       	st	X, r24
    11bc:	29 c0       	rjmp	.+82     	; 0x1210 <GPIO_setupPinDirection+0x1c6>
				break;
			case PORTC_ID:
				DDRC&=~(1<<pin_num);
    11be:	a4 e3       	ldi	r26, 0x34	; 52
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 e3       	ldi	r30, 0x34	; 52
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	48 2f       	mov	r20, r24
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	02 2e       	mov	r0, r18
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <GPIO_setupPinDirection+0x192>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	0a 94       	dec	r0
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <GPIO_setupPinDirection+0x18e>
    11e0:	80 95       	com	r24
    11e2:	84 23       	and	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <GPIO_setupPinDirection+0x1c6>
				break;
			default:
				DDRD&=~(1<<pin_num);
    11e8:	a1 e3       	ldi	r26, 0x31	; 49
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e1 e3       	ldi	r30, 0x31	; 49
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <GPIO_setupPinDirection+0x1bc>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <GPIO_setupPinDirection+0x1b8>
    120a:	80 95       	com	r24
    120c:	84 23       	and	r24, r20
    120e:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1210:	27 96       	adiw	r28, 0x07	; 7
    1212:	0f b6       	in	r0, 0x3f	; 63
    1214:	f8 94       	cli
    1216:	de bf       	out	0x3e, r29	; 62
    1218:	0f be       	out	0x3f, r0	; 63
    121a:	cd bf       	out	0x3d, r28	; 61
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <GPIO_setupPortDirection>:
/*
 * Description :
 * A function to set whole port direction if it was input port or output port
 */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PinDirectionType direction)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <GPIO_setupPortDirection+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <GPIO_setupPortDirection+0x8>
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	89 83       	std	Y+1, r24	; 0x01
    1230:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	84 30       	cpi	r24, 0x04	; 4
    1236:	30 f5       	brcc	.+76     	; 0x1284 <GPIO_setupPortDirection+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3c 83       	std	Y+4, r19	; 0x04
    1240:	2b 83       	std	Y+3, r18	; 0x03
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	71 f0       	breq	.+28     	; 0x1268 <GPIO_setupPortDirection+0x46>
    124c:	2b 81       	ldd	r18, Y+3	; 0x03
    124e:	3c 81       	ldd	r19, Y+4	; 0x04
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	71 f0       	breq	.+28     	; 0x1272 <GPIO_setupPortDirection+0x50>
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	79 f4       	brne	.+30     	; 0x127c <GPIO_setupPortDirection+0x5a>
		{
		case PORTA_ID:
			DDRA=direction;
    125e:	ea e3       	ldi	r30, 0x3A	; 58
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <GPIO_setupPortDirection+0x62>
			break;
		case PORTB_ID:
			DDRB=direction;
    1268:	e7 e3       	ldi	r30, 0x37	; 55
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <GPIO_setupPortDirection+0x62>
			break;
		case PORTC_ID:
			DDRC=direction;
    1272:	e4 e3       	ldi	r30, 0x34	; 52
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <GPIO_setupPortDirection+0x62>
			break;
		default:
			DDRD=direction;
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
			break;
		}
	}
}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <GPIO_writePin>:
/*
 * Description :
 * A function to set pin with 1 or 0
 */
void GPIO_writePin(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	27 97       	sbiw	r28, 0x07	; 7
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	de bf       	out	0x3e, r29	; 62
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	cd bf       	out	0x3d, r28	; 61
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	6a 83       	std	Y+2, r22	; 0x02
    12aa:	4b 83       	std	Y+3, r20	; 0x03
	if(pin_num>PIN7_ID||pin_num<PIN0_ID||(direction!=1 && direction!=0))
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	08 f0       	brcs	.+2      	; 0x12b4 <GPIO_writePin+0x22>
    12b2:	d9 c0       	rjmp	.+434    	; 0x1466 <GPIO_writePin+0x1d4>
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	21 f0       	breq	.+8      	; 0x12c2 <GPIO_writePin+0x30>
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	88 23       	and	r24, r24
    12be:	09 f0       	breq	.+2      	; 0x12c2 <GPIO_writePin+0x30>
    12c0:	d2 c0       	rjmp	.+420    	; 0x1466 <GPIO_writePin+0x1d4>
	{
		/*do noting*/
	}
	else{

		if(direction==PIN_OUTPUT)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	81 30       	cpi	r24, 0x01	; 1
    12c6:	09 f0       	breq	.+2      	; 0x12ca <GPIO_writePin+0x38>
    12c8:	63 c0       	rjmp	.+198    	; 0x1390 <GPIO_writePin+0xfe>
		{
			switch(port_num)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3f 83       	std	Y+7, r19	; 0x07
    12d2:	2e 83       	std	Y+6, r18	; 0x06
    12d4:	8e 81       	ldd	r24, Y+6	; 0x06
    12d6:	9f 81       	ldd	r25, Y+7	; 0x07
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	91 05       	cpc	r25, r1
    12dc:	e9 f0       	breq	.+58     	; 0x1318 <GPIO_writePin+0x86>
    12de:	2e 81       	ldd	r18, Y+6	; 0x06
    12e0:	3f 81       	ldd	r19, Y+7	; 0x07
    12e2:	22 30       	cpi	r18, 0x02	; 2
    12e4:	31 05       	cpc	r19, r1
    12e6:	61 f1       	breq	.+88     	; 0x1340 <GPIO_writePin+0xae>
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	9f 81       	ldd	r25, Y+7	; 0x07
    12ec:	00 97       	sbiw	r24, 0x00	; 0
    12ee:	e1 f5       	brne	.+120    	; 0x1368 <GPIO_writePin+0xd6>
			{
			case PORTA_ID:
				PORTA|=(1<<pin_num);
    12f0:	ab e3       	ldi	r26, 0x3B	; 59
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	eb e3       	ldi	r30, 0x3B	; 59
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	8a 81       	ldd	r24, Y+2	; 0x02
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 2e       	mov	r0, r18
    1308:	02 c0       	rjmp	.+4      	; 0x130e <GPIO_writePin+0x7c>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	0a 94       	dec	r0
    1310:	e2 f7       	brpl	.-8      	; 0x130a <GPIO_writePin+0x78>
    1312:	84 2b       	or	r24, r20
    1314:	8c 93       	st	X, r24
    1316:	a7 c0       	rjmp	.+334    	; 0x1466 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB|=(1<<pin_num);
    1318:	a8 e3       	ldi	r26, 0x38	; 56
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e8 e3       	ldi	r30, 0x38	; 56
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	48 2f       	mov	r20, r24
    1324:	8a 81       	ldd	r24, Y+2	; 0x02
    1326:	28 2f       	mov	r18, r24
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	81 e0       	ldi	r24, 0x01	; 1
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	02 2e       	mov	r0, r18
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <GPIO_writePin+0xa4>
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	0a 94       	dec	r0
    1338:	e2 f7       	brpl	.-8      	; 0x1332 <GPIO_writePin+0xa0>
    133a:	84 2b       	or	r24, r20
    133c:	8c 93       	st	X, r24
    133e:	93 c0       	rjmp	.+294    	; 0x1466 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC|=(1<<pin_num);
    1340:	a5 e3       	ldi	r26, 0x35	; 53
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e3       	ldi	r30, 0x35	; 53
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <GPIO_writePin+0xcc>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <GPIO_writePin+0xc8>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	7f c0       	rjmp	.+254    	; 0x1466 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD|=(1<<pin_num);
    1368:	a2 e3       	ldi	r26, 0x32	; 50
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e2 e3       	ldi	r30, 0x32	; 50
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	48 2f       	mov	r20, r24
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	02 2e       	mov	r0, r18
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <GPIO_writePin+0xf4>
    1382:	88 0f       	add	r24, r24
    1384:	99 1f       	adc	r25, r25
    1386:	0a 94       	dec	r0
    1388:	e2 f7       	brpl	.-8      	; 0x1382 <GPIO_writePin+0xf0>
    138a:	84 2b       	or	r24, r20
    138c:	8c 93       	st	X, r24
    138e:	6b c0       	rjmp	.+214    	; 0x1466 <GPIO_writePin+0x1d4>
				break;
			}
		}
		else if(direction==PIN_INPUT)
    1390:	8b 81       	ldd	r24, Y+3	; 0x03
    1392:	88 23       	and	r24, r24
    1394:	09 f0       	breq	.+2      	; 0x1398 <GPIO_writePin+0x106>
    1396:	67 c0       	rjmp	.+206    	; 0x1466 <GPIO_writePin+0x1d4>
		{
			switch(port_num)
    1398:	89 81       	ldd	r24, Y+1	; 0x01
    139a:	28 2f       	mov	r18, r24
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	3d 83       	std	Y+5, r19	; 0x05
    13a0:	2c 83       	std	Y+4, r18	; 0x04
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	81 30       	cpi	r24, 0x01	; 1
    13a8:	91 05       	cpc	r25, r1
    13aa:	f9 f0       	breq	.+62     	; 0x13ea <GPIO_writePin+0x158>
    13ac:	2c 81       	ldd	r18, Y+4	; 0x04
    13ae:	3d 81       	ldd	r19, Y+5	; 0x05
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	79 f1       	breq	.+94     	; 0x1414 <GPIO_writePin+0x182>
    13b6:	8c 81       	ldd	r24, Y+4	; 0x04
    13b8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	09 f0       	breq	.+2      	; 0x13c0 <GPIO_writePin+0x12e>
    13be:	3f c0       	rjmp	.+126    	; 0x143e <GPIO_writePin+0x1ac>
			{
			case PORTA_ID:
				PORTA&=~(1<<pin_num);
    13c0:	ab e3       	ldi	r26, 0x3B	; 59
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	eb e3       	ldi	r30, 0x3B	; 59
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <GPIO_writePin+0x14c>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <GPIO_writePin+0x148>
    13e2:	80 95       	com	r24
    13e4:	84 23       	and	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	3e c0       	rjmp	.+124    	; 0x1466 <GPIO_writePin+0x1d4>
				break;
			case PORTB_ID:
				PORTB&=~(1<<pin_num);
    13ea:	a8 e3       	ldi	r26, 0x38	; 56
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_writePin+0x176>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_writePin+0x172>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	29 c0       	rjmp	.+82     	; 0x1466 <GPIO_writePin+0x1d4>
				break;
			case PORTC_ID:
				PORTC&=~(1<<pin_num);
    1414:	a5 e3       	ldi	r26, 0x35	; 53
    1416:	b0 e0       	ldi	r27, 0x00	; 0
    1418:	e5 e3       	ldi	r30, 0x35	; 53
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	48 2f       	mov	r20, r24
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	02 2e       	mov	r0, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_writePin+0x1a0>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	0a 94       	dec	r0
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_writePin+0x19c>
    1436:	80 95       	com	r24
    1438:	84 23       	and	r24, r20
    143a:	8c 93       	st	X, r24
    143c:	14 c0       	rjmp	.+40     	; 0x1466 <GPIO_writePin+0x1d4>
				break;
			default:
				PORTD&=~(1<<pin_num);
    143e:	a2 e3       	ldi	r26, 0x32	; 50
    1440:	b0 e0       	ldi	r27, 0x00	; 0
    1442:	e2 e3       	ldi	r30, 0x32	; 50
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	80 81       	ld	r24, Z
    1448:	48 2f       	mov	r20, r24
    144a:	8a 81       	ldd	r24, Y+2	; 0x02
    144c:	28 2f       	mov	r18, r24
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	81 e0       	ldi	r24, 0x01	; 1
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	02 2e       	mov	r0, r18
    1456:	02 c0       	rjmp	.+4      	; 0x145c <GPIO_writePin+0x1ca>
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	0a 94       	dec	r0
    145e:	e2 f7       	brpl	.-8      	; 0x1458 <GPIO_writePin+0x1c6>
    1460:	80 95       	com	r24
    1462:	84 23       	and	r24, r20
    1464:	8c 93       	st	X, r24
				break;
			}
		}
	}
}
    1466:	27 96       	adiw	r28, 0x07	; 7
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <GPIO_writePort>:
/*
 * Description :
 * A function to write whole port direction if it is 0 or 0xFF
 */
void GPIO_writePort(uint8 port_num,GPIO_PinDirectionType direction)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <GPIO_writePort+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <GPIO_writePort+0x8>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	89 83       	std	Y+1, r24	; 0x01
    1486:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	84 30       	cpi	r24, 0x04	; 4
    148c:	30 f5       	brcc	.+76     	; 0x14da <GPIO_writePort+0x62>
		/*do noting*/
	}

	else
	{
		switch(port_num)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	3c 83       	std	Y+4, r19	; 0x04
    1496:	2b 83       	std	Y+3, r18	; 0x03
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	91 05       	cpc	r25, r1
    14a0:	71 f0       	breq	.+28     	; 0x14be <GPIO_writePort+0x46>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	71 f0       	breq	.+28     	; 0x14c8 <GPIO_writePort+0x50>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	00 97       	sbiw	r24, 0x00	; 0
    14b2:	79 f4       	brne	.+30     	; 0x14d2 <GPIO_writePort+0x5a>
		{
		case PORTA_ID:
			PORTA=direction;
    14b4:	eb e3       	ldi	r30, 0x3B	; 59
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ba:	80 83       	st	Z, r24
    14bc:	0e c0       	rjmp	.+28     	; 0x14da <GPIO_writePort+0x62>
			break;
		case PORTB_ID:
			PORTB=direction;
    14be:	e8 e3       	ldi	r30, 0x38	; 56
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	80 83       	st	Z, r24
    14c6:	09 c0       	rjmp	.+18     	; 0x14da <GPIO_writePort+0x62>
			break;
		case PORTC_ID:
			PORTC=direction;
    14c8:	e5 e3       	ldi	r30, 0x35	; 53
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	80 83       	st	Z, r24
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <GPIO_writePort+0x62>
			break;
		default:
			PORTD=direction;
    14d2:	e2 e3       	ldi	r30, 0x32	; 50
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	cf 91       	pop	r28
    14e4:	df 91       	pop	r29
    14e6:	08 95       	ret

000014e8 <GPIO_readPin>:
/*
 * Description :
 * A function to read pin if it is 1 or 0
 */
uint8 GPIO_readPin(uint8 port_num,uint8 pin_num)
{
    14e8:	df 93       	push	r29
    14ea:	cf 93       	push	r28
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <GPIO_readPin+0x6>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <GPIO_readPin+0x8>
    14f0:	0f 92       	push	r0
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	89 83       	std	Y+1, r24	; 0x01
    14f8:	6a 83       	std	Y+2, r22	; 0x02
	if(pin_num>PIN7_ID||pin_num<PIN0_ID)
    14fa:	8a 81       	ldd	r24, Y+2	; 0x02
    14fc:	88 30       	cpi	r24, 0x08	; 8
    14fe:	10 f0       	brcs	.+4      	; 0x1504 <GPIO_readPin+0x1c>
	{
		return 0;
    1500:	1d 82       	std	Y+5, r1	; 0x05
    1502:	5f c0       	rjmp	.+190    	; 0x15c2 <GPIO_readPin+0xda>
	}
	else{
		switch(port_num)
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	3c 83       	std	Y+4, r19	; 0x04
    150c:	2b 83       	std	Y+3, r18	; 0x03
    150e:	4b 81       	ldd	r20, Y+3	; 0x03
    1510:	5c 81       	ldd	r21, Y+4	; 0x04
    1512:	41 30       	cpi	r20, 0x01	; 1
    1514:	51 05       	cpc	r21, r1
    1516:	e9 f0       	breq	.+58     	; 0x1552 <GPIO_readPin+0x6a>
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	82 30       	cpi	r24, 0x02	; 2
    151e:	91 05       	cpc	r25, r1
    1520:	59 f1       	breq	.+86     	; 0x1578 <GPIO_readPin+0x90>
    1522:	2b 81       	ldd	r18, Y+3	; 0x03
    1524:	3c 81       	ldd	r19, Y+4	; 0x04
    1526:	21 15       	cp	r18, r1
    1528:	31 05       	cpc	r19, r1
    152a:	c9 f5       	brne	.+114    	; 0x159e <GPIO_readPin+0xb6>
		{
		case PORTA_ID:
			return GET_BIT(PINA,pin_num);
    152c:	e9 e3       	ldi	r30, 0x39	; 57
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_readPin+0x5c>
    1540:	55 95       	asr	r21
    1542:	47 95       	ror	r20
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_readPin+0x58>
    1548:	ca 01       	movw	r24, r20
    154a:	58 2f       	mov	r21, r24
    154c:	51 70       	andi	r21, 0x01	; 1
    154e:	5d 83       	std	Y+5, r21	; 0x05
    1550:	38 c0       	rjmp	.+112    	; 0x15c2 <GPIO_readPin+0xda>
		case PORTB_ID:
			return GET_BIT(PINB,pin_num);
    1552:	e6 e3       	ldi	r30, 0x36	; 54
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	28 2f       	mov	r18, r24
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	88 2f       	mov	r24, r24
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a9 01       	movw	r20, r18
    1564:	02 c0       	rjmp	.+4      	; 0x156a <GPIO_readPin+0x82>
    1566:	55 95       	asr	r21
    1568:	47 95       	ror	r20
    156a:	8a 95       	dec	r24
    156c:	e2 f7       	brpl	.-8      	; 0x1566 <GPIO_readPin+0x7e>
    156e:	ca 01       	movw	r24, r20
    1570:	58 2f       	mov	r21, r24
    1572:	51 70       	andi	r21, 0x01	; 1
    1574:	5d 83       	std	Y+5, r21	; 0x05
    1576:	25 c0       	rjmp	.+74     	; 0x15c2 <GPIO_readPin+0xda>
		case PORTC_ID:
			return GET_BIT(PINC,pin_num);
    1578:	e3 e3       	ldi	r30, 0x33	; 51
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8a 81       	ldd	r24, Y+2	; 0x02
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <GPIO_readPin+0xa8>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <GPIO_readPin+0xa4>
    1594:	ca 01       	movw	r24, r20
    1596:	58 2f       	mov	r21, r24
    1598:	51 70       	andi	r21, 0x01	; 1
    159a:	5d 83       	std	Y+5, r21	; 0x05
    159c:	12 c0       	rjmp	.+36     	; 0x15c2 <GPIO_readPin+0xda>
		default:
			return GET_BIT(PIND,pin_num);
    159e:	e0 e3       	ldi	r30, 0x30	; 48
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_readPin+0xce>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_readPin+0xca>
    15ba:	ca 01       	movw	r24, r20
    15bc:	58 2f       	mov	r21, r24
    15be:	51 70       	andi	r21, 0x01	; 1
    15c0:	5d 83       	std	Y+5, r21	; 0x05
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
		}
	}
}
    15c4:	0f 90       	pop	r0
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	cf 91       	pop	r28
    15d0:	df 91       	pop	r29
    15d2:	08 95       	ret

000015d4 <GPIO_readPort>:
/*
 * Description :
 * A function to read whole port direction if it is 0 or 0xFF
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15d4:	df 93       	push	r29
    15d6:	cf 93       	push	r28
    15d8:	00 d0       	rcall	.+0      	; 0x15da <GPIO_readPort+0x6>
    15da:	00 d0       	rcall	.+0      	; 0x15dc <GPIO_readPort+0x8>
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	89 83       	std	Y+1, r24	; 0x01
	if(port_num>PORTD_ID||port_num<PORTA_ID)
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	10 f0       	brcs	.+4      	; 0x15ec <GPIO_readPort+0x18>
	{
		return 0;
    15e8:	1c 82       	std	Y+4, r1	; 0x04
    15ea:	26 c0       	rjmp	.+76     	; 0x1638 <GPIO_readPort+0x64>
	}

	else
	{
		switch(port_num)
    15ec:	89 81       	ldd	r24, Y+1	; 0x01
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	3b 83       	std	Y+3, r19	; 0x03
    15f4:	2a 83       	std	Y+2, r18	; 0x02
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	9b 81       	ldd	r25, Y+3	; 0x03
    15fa:	81 30       	cpi	r24, 0x01	; 1
    15fc:	91 05       	cpc	r25, r1
    15fe:	71 f0       	breq	.+28     	; 0x161c <GPIO_readPort+0x48>
    1600:	2a 81       	ldd	r18, Y+2	; 0x02
    1602:	3b 81       	ldd	r19, Y+3	; 0x03
    1604:	22 30       	cpi	r18, 0x02	; 2
    1606:	31 05       	cpc	r19, r1
    1608:	71 f0       	breq	.+28     	; 0x1626 <GPIO_readPort+0x52>
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	9b 81       	ldd	r25, Y+3	; 0x03
    160e:	00 97       	sbiw	r24, 0x00	; 0
    1610:	79 f4       	brne	.+30     	; 0x1630 <GPIO_readPort+0x5c>
		{
		case PORTA_ID:
			return PINA;
    1612:	e9 e3       	ldi	r30, 0x39	; 57
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	90 81       	ld	r25, Z
    1618:	9c 83       	std	Y+4, r25	; 0x04
    161a:	0e c0       	rjmp	.+28     	; 0x1638 <GPIO_readPort+0x64>
		case PORTB_ID:
			return PINB;
    161c:	e6 e3       	ldi	r30, 0x36	; 54
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	20 81       	ld	r18, Z
    1622:	2c 83       	std	Y+4, r18	; 0x04
    1624:	09 c0       	rjmp	.+18     	; 0x1638 <GPIO_readPort+0x64>
		case PORTC_ID:
			return PINC;
    1626:	e3 e3       	ldi	r30, 0x33	; 51
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	30 81       	ld	r19, Z
    162c:	3c 83       	std	Y+4, r19	; 0x04
    162e:	04 c0       	rjmp	.+8      	; 0x1638 <GPIO_readPort+0x64>
		default:
			return PINC;
    1630:	e3 e3       	ldi	r30, 0x33	; 51
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	8c 83       	std	Y+4, r24	; 0x04
    1638:	8c 81       	ldd	r24, Y+4	; 0x04
		}
	}
}
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the Keypad pressed button
 */
uint8 KEYPAD_getPressedKey(void)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <KEYPAD_getPressedKey+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
	uint8 row,col;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID,PIN_INPUT);
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	64 e0       	ldi	r22, 0x04	; 4
    1656:	40 e0       	ldi	r20, 0x00	; 0
    1658:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+1,PIN_INPUT);
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	65 e0       	ldi	r22, 0x05	; 5
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+2,PIN_INPUT);
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	66 e0       	ldi	r22, 0x06	; 6
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+3,PIN_INPUT);
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	67 e0       	ldi	r22, 0x07	; 7
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID,PIN_INPUT);
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	62 e0       	ldi	r22, 0x02	; 2
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+1,PIN_INPUT);
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	63 e0       	ldi	r22, 0x03	; 3
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+2,PIN_INPUT);
    168e:	83 e0       	ldi	r24, 0x03	; 3
    1690:	64 e0       	ldi	r22, 0x04	; 4
    1692:	40 e0       	ldi	r20, 0x00	; 0
    1694:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
#if (KEYPAD_NUM_COLS==4)
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
    1698:	81 e0       	ldi	r24, 0x01	; 1
    169a:	65 e0       	ldi	r22, 0x05	; 5
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    16a2:	1a 82       	std	Y+2, r1	; 0x02
    16a4:	3c c0       	rjmp	.+120    	; 0x171e <KEYPAD_getPressedKey+0xd6>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	98 2f       	mov	r25, r24
    16aa:	9c 5f       	subi	r25, 0xFC	; 252
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	69 2f       	mov	r22, r25
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	98 2f       	mov	r25, r24
    16ba:	9c 5f       	subi	r25, 0xFC	; 252
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	69 2f       	mov	r22, r25
    16c0:	40 e0       	ldi	r20, 0x00	; 0
    16c2:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    16c6:	19 82       	std	Y+1, r1	; 0x01
    16c8:	1c c0       	rjmp	.+56     	; 0x1702 <KEYPAD_getPressedKey+0xba>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	98 2f       	mov	r25, r24
    16ce:	9e 5f       	subi	r25, 0xFE	; 254
    16d0:	83 e0       	ldi	r24, 0x03	; 3
    16d2:	69 2f       	mov	r22, r25
    16d4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <GPIO_readPin>
    16d8:	88 23       	and	r24, r24
    16da:	81 f4       	brne	.+32     	; 0x16fc <KEYPAD_getPressedKey+0xb4>
					#endif

					#elif (KEYPAD_NUM_COLS == 4)

					#ifdef STANDARD_KEYPAD
						return ((row*KEYPAD_NUM_COLS)+col+1);
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	98 2f       	mov	r25, r24
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	89 0f       	add	r24, r25
    16f0:	8f 5f       	subi	r24, 0xFF	; 255
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	cf 91       	pop	r28
    16f8:	df 91       	pop	r29
    16fa:	08 95       	ret
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0;col<KEYPAD_NUM_COLS;col++)
    16fc:	89 81       	ldd	r24, Y+1	; 0x01
    16fe:	8f 5f       	subi	r24, 0xFF	; 255
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	84 30       	cpi	r24, 0x04	; 4
    1706:	08 f3       	brcs	.-62     	; 0x16ca <KEYPAD_getPressedKey+0x82>
					#endif
					#endif

				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	98 2f       	mov	r25, r24
    170c:	9c 5f       	subi	r25, 0xFC	; 252
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	69 2f       	mov	r22, r25
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+3,PIN_INPUT);
#endif

	while(1)
	{
		for(row=0;row<KEYPAD_NUM_ROWS;row++)
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	8f 5f       	subi	r24, 0xFF	; 255
    171c:	8a 83       	std	Y+2, r24	; 0x02
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	84 30       	cpi	r24, 0x04	; 4
    1722:	08 f2       	brcs	.-126    	; 0x16a6 <KEYPAD_getPressedKey+0x5e>
    1724:	be cf       	rjmp	.-132    	; 0x16a2 <KEYPAD_getPressedKey+0x5a>

00001726 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 8-bits.
 */
void LCD_init(void)
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	cd b7       	in	r28, 0x3d	; 61
    172c:	de b7       	in	r29, 0x3e	; 62
    172e:	6c 97       	sbiw	r28, 0x1c	; 28
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	de bf       	out	0x3e, r29	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	cd bf       	out	0x3d, r28	; 61
	/* 1- Configure the Enable and RS as output ports */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    173a:	80 e0       	ldi	r24, 0x00	; 0
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	a0 ea       	ldi	r26, 0xA0	; 160
    1754:	b1 e4       	ldi	r27, 0x41	; 65
    1756:	89 8f       	std	Y+25, r24	; 0x19
    1758:	9a 8f       	std	Y+26, r25	; 0x1a
    175a:	ab 8f       	std	Y+27, r26	; 0x1b
    175c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    175e:	69 8d       	ldd	r22, Y+25	; 0x19
    1760:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1762:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1764:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	4a e7       	ldi	r20, 0x7A	; 122
    176c:	55 e4       	ldi	r21, 0x45	; 69
    176e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1772:	dc 01       	movw	r26, r24
    1774:	cb 01       	movw	r24, r22
    1776:	8d 8b       	std	Y+21, r24	; 0x15
    1778:	9e 8b       	std	Y+22, r25	; 0x16
    177a:	af 8b       	std	Y+23, r26	; 0x17
    177c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    177e:	6d 89       	ldd	r22, Y+21	; 0x15
    1780:	7e 89       	ldd	r23, Y+22	; 0x16
    1782:	8f 89       	ldd	r24, Y+23	; 0x17
    1784:	98 8d       	ldd	r25, Y+24	; 0x18
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1792:	88 23       	and	r24, r24
    1794:	2c f4       	brge	.+10     	; 0x17a0 <LCD_init+0x7a>
		__ticks = 1;
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	9c 8b       	std	Y+20, r25	; 0x14
    179c:	8b 8b       	std	Y+19, r24	; 0x13
    179e:	3f c0       	rjmp	.+126    	; 0x181e <LCD_init+0xf8>
	else if (__tmp > 65535)
    17a0:	6d 89       	ldd	r22, Y+21	; 0x15
    17a2:	7e 89       	ldd	r23, Y+22	; 0x16
    17a4:	8f 89       	ldd	r24, Y+23	; 0x17
    17a6:	98 8d       	ldd	r25, Y+24	; 0x18
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	4c f5       	brge	.+82     	; 0x180a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e2       	ldi	r20, 0x20	; 32
    17c6:	51 e4       	ldi	r21, 0x41	; 65
    17c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17cc:	dc 01       	movw	r26, r24
    17ce:	cb 01       	movw	r24, r22
    17d0:	bc 01       	movw	r22, r24
    17d2:	cd 01       	movw	r24, r26
    17d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	9c 8b       	std	Y+20, r25	; 0x14
    17de:	8b 8b       	std	Y+19, r24	; 0x13
    17e0:	0f c0       	rjmp	.+30     	; 0x1800 <LCD_init+0xda>
    17e2:	80 e9       	ldi	r24, 0x90	; 144
    17e4:	91 e0       	ldi	r25, 0x01	; 1
    17e6:	9a 8b       	std	Y+18, r25	; 0x12
    17e8:	89 8b       	std	Y+17, r24	; 0x11
    17ea:	89 89       	ldd	r24, Y+17	; 0x11
    17ec:	9a 89       	ldd	r25, Y+18	; 0x12
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <LCD_init+0xc8>
    17f2:	9a 8b       	std	Y+18, r25	; 0x12
    17f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f6:	8b 89       	ldd	r24, Y+19	; 0x13
    17f8:	9c 89       	ldd	r25, Y+20	; 0x14
    17fa:	01 97       	sbiw	r24, 0x01	; 1
    17fc:	9c 8b       	std	Y+20, r25	; 0x14
    17fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1800:	8b 89       	ldd	r24, Y+19	; 0x13
    1802:	9c 89       	ldd	r25, Y+20	; 0x14
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	69 f7       	brne	.-38     	; 0x17e2 <LCD_init+0xbc>
    1808:	14 c0       	rjmp	.+40     	; 0x1832 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180a:	6d 89       	ldd	r22, Y+21	; 0x15
    180c:	7e 89       	ldd	r23, Y+22	; 0x16
    180e:	8f 89       	ldd	r24, Y+23	; 0x17
    1810:	98 8d       	ldd	r25, Y+24	; 0x18
    1812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	9c 8b       	std	Y+20, r25	; 0x14
    181c:	8b 8b       	std	Y+19, r24	; 0x13
    181e:	8b 89       	ldd	r24, Y+19	; 0x13
    1820:	9c 89       	ldd	r25, Y+20	; 0x14
    1822:	98 8b       	std	Y+16, r25	; 0x10
    1824:	8f 87       	std	Y+15, r24	; 0x0f
    1826:	8f 85       	ldd	r24, Y+15	; 0x0f
    1828:	98 89       	ldd	r25, Y+16	; 0x10
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <LCD_init+0x104>
    182e:	98 8b       	std	Y+16, r25	; 0x10
    1830:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_BIT_MODE == 4)

	/* 2 - Configure the data pins as output port */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,PIN_OUTPUT);
    1832:	80 e0       	ldi	r24, 0x00	; 0
    1834:	63 e0       	ldi	r22, 0x03	; 3
    1836:	41 e0       	ldi	r20, 0x01	; 1
    1838:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,PIN_OUTPUT);
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	64 e0       	ldi	r22, 0x04	; 4
    1840:	41 e0       	ldi	r20, 0x01	; 1
    1842:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,PIN_OUTPUT);
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	65 e0       	ldi	r22, 0x05	; 5
    184a:	41 e0       	ldi	r20, 0x01	; 1
    184c:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,PIN_OUTPUT);
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	66 e0       	ldi	r22, 0x06	; 6
    1854:	41 e0       	ldi	r20, 0x01	; 1
    1856:	0e 94 25 08 	call	0x104a	; 0x104a <GPIO_setupPinDirection>
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a0 ea       	ldi	r26, 0xA0	; 160
    1860:	b1 e4       	ldi	r27, 0x41	; 65
    1862:	8b 87       	std	Y+11, r24	; 0x0b
    1864:	9c 87       	std	Y+12, r25	; 0x0c
    1866:	ad 87       	std	Y+13, r26	; 0x0d
    1868:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186a:	6b 85       	ldd	r22, Y+11	; 0x0b
    186c:	7c 85       	ldd	r23, Y+12	; 0x0c
    186e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1870:	9e 85       	ldd	r25, Y+14	; 0x0e
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	4a e7       	ldi	r20, 0x7A	; 122
    1878:	55 e4       	ldi	r21, 0x45	; 69
    187a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	8f 83       	std	Y+7, r24	; 0x07
    1884:	98 87       	std	Y+8, r25	; 0x08
    1886:	a9 87       	std	Y+9, r26	; 0x09
    1888:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e8       	ldi	r20, 0x80	; 128
    1898:	5f e3       	ldi	r21, 0x3F	; 63
    189a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    189e:	88 23       	and	r24, r24
    18a0:	2c f4       	brge	.+10     	; 0x18ac <LCD_init+0x186>
		__ticks = 1;
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9e 83       	std	Y+6, r25	; 0x06
    18a8:	8d 83       	std	Y+5, r24	; 0x05
    18aa:	3f c0       	rjmp	.+126    	; 0x192a <LCD_init+0x204>
	else if (__tmp > 65535)
    18ac:	6f 81       	ldd	r22, Y+7	; 0x07
    18ae:	78 85       	ldd	r23, Y+8	; 0x08
    18b0:	89 85       	ldd	r24, Y+9	; 0x09
    18b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b4:	20 e0       	ldi	r18, 0x00	; 0
    18b6:	3f ef       	ldi	r19, 0xFF	; 255
    18b8:	4f e7       	ldi	r20, 0x7F	; 127
    18ba:	57 e4       	ldi	r21, 0x47	; 71
    18bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18c0:	18 16       	cp	r1, r24
    18c2:	4c f5       	brge	.+82     	; 0x1916 <LCD_init+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    18cc:	20 e0       	ldi	r18, 0x00	; 0
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	40 e2       	ldi	r20, 0x20	; 32
    18d2:	51 e4       	ldi	r21, 0x41	; 65
    18d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d8:	dc 01       	movw	r26, r24
    18da:	cb 01       	movw	r24, r22
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	9e 83       	std	Y+6, r25	; 0x06
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	0f c0       	rjmp	.+30     	; 0x190c <LCD_init+0x1e6>
    18ee:	80 e9       	ldi	r24, 0x90	; 144
    18f0:	91 e0       	ldi	r25, 0x01	; 1
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	01 97       	sbiw	r24, 0x01	; 1
    18fc:	f1 f7       	brne	.-4      	; 0x18fa <LCD_init+0x1d4>
    18fe:	9c 83       	std	Y+4, r25	; 0x04
    1900:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1902:	8d 81       	ldd	r24, Y+5	; 0x05
    1904:	9e 81       	ldd	r25, Y+6	; 0x06
    1906:	01 97       	sbiw	r24, 0x01	; 1
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	69 f7       	brne	.-38     	; 0x18ee <LCD_init+0x1c8>
    1914:	14 c0       	rjmp	.+40     	; 0x193e <LCD_init+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1916:	6f 81       	ldd	r22, Y+7	; 0x07
    1918:	78 85       	ldd	r23, Y+8	; 0x08
    191a:	89 85       	ldd	r24, Y+9	; 0x09
    191c:	9a 85       	ldd	r25, Y+10	; 0x0a
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	9e 83       	std	Y+6, r25	; 0x06
    1928:	8d 83       	std	Y+5, r24	; 0x05
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	9a 81       	ldd	r25, Y+2	; 0x02
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	f1 f7       	brne	.-4      	; 0x1936 <LCD_init+0x210>
    193a:	9a 83       	std	Y+2, r25	; 0x02
    193c:	89 83       	std	Y+1, r24	; 0x01

	/* 3 - LCD Power ON delay always > 15ms */
	_delay_ms(20);

	/* 3.2 - send commands 0x33 0x32 0x28 to init lcd*/
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    193e:	83 e3       	ldi	r24, 0x33	; 51
    1940:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1944:	82 e3       	ldi	r24, 0x32	; 50
    1946:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    194a:	88 e2       	ldi	r24, 0x28	; 40
    194c:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_sendCommand>
#endif
	/* 5 - send command cursor off*/
	LCD_sendCommand(LCD_CURSOR_OFF);
    1950:	8c e0       	ldi	r24, 0x0C	; 12
    1952:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_sendCommand>

	/* 6 - send command clear screen */
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_sendCommand>
}
    195c:	6c 96       	adiw	r28, 0x1c	; 28
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	f8 94       	cli
    1962:	de bf       	out	0x3e, r29	; 62
    1964:	0f be       	out	0x3f, r0	; 63
    1966:	cd bf       	out	0x3d, r28	; 61
    1968:	cf 91       	pop	r28
    196a:	df 91       	pop	r29
    196c:	08 95       	ret

0000196e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	cd b7       	in	r28, 0x3d	; 61
    1978:	de b7       	in	r29, 0x3e	; 62
    197a:	c5 59       	subi	r28, 0x95	; 149
    197c:	d0 40       	sbci	r29, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	fe 01       	movw	r30, r28
    198a:	eb 56       	subi	r30, 0x6B	; 107
    198c:	ff 4f       	sbci	r31, 0xFF	; 255
    198e:	80 83       	st	Z, r24
	/* 1 - Clear RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,0);
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	61 e0       	ldi	r22, 0x01	; 1
    1994:	40 e0       	ldi	r20, 0x00	; 0
    1996:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    199a:	fe 01       	movw	r30, r28
    199c:	ef 56       	subi	r30, 0x6F	; 111
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	a0 e8       	ldi	r26, 0x80	; 128
    19a6:	bf e3       	ldi	r27, 0x3F	; 63
    19a8:	80 83       	st	Z, r24
    19aa:	91 83       	std	Z+1, r25	; 0x01
    19ac:	a2 83       	std	Z+2, r26	; 0x02
    19ae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19b0:	8e 01       	movw	r16, r28
    19b2:	03 57       	subi	r16, 0x73	; 115
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	fe 01       	movw	r30, r28
    19b8:	ef 56       	subi	r30, 0x6F	; 111
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	2b ea       	ldi	r18, 0xAB	; 171
    19c6:	3a ea       	ldi	r19, 0xAA	; 170
    19c8:	4a ea       	ldi	r20, 0xAA	; 170
    19ca:	50 e4       	ldi	r21, 0x40	; 64
    19cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	f8 01       	movw	r30, r16
    19d6:	80 83       	st	Z, r24
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	a2 83       	std	Z+2, r26	; 0x02
    19dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19de:	fe 01       	movw	r30, r28
    19e0:	e3 57       	subi	r30, 0x73	; 115
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	60 81       	ld	r22, Z
    19e6:	71 81       	ldd	r23, Z+1	; 0x01
    19e8:	82 81       	ldd	r24, Z+2	; 0x02
    19ea:	93 81       	ldd	r25, Z+3	; 0x03
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	34 f4       	brge	.+12     	; 0x1a08 <LCD_sendCommand+0x9a>
		__ticks = 1;
    19fc:	fe 01       	movw	r30, r28
    19fe:	e4 57       	subi	r30, 0x74	; 116
    1a00:	ff 4f       	sbci	r31, 0xFF	; 255
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	80 83       	st	Z, r24
    1a06:	e0 c0       	rjmp	.+448    	; 0x1bc8 <LCD_sendCommand+0x25a>
	else if (__tmp > 255)
    1a08:	fe 01       	movw	r30, r28
    1a0a:	e3 57       	subi	r30, 0x73	; 115
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	60 81       	ld	r22, Z
    1a10:	71 81       	ldd	r23, Z+1	; 0x01
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	20 e0       	ldi	r18, 0x00	; 0
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	4f e7       	ldi	r20, 0x7F	; 127
    1a1c:	53 e4       	ldi	r21, 0x43	; 67
    1a1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a22:	18 16       	cp	r1, r24
    1a24:	0c f0       	brlt	.+2      	; 0x1a28 <LCD_sendCommand+0xba>
    1a26:	c0 c0       	rjmp	.+384    	; 0x1ba8 <LCD_sendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1a28:	fe 01       	movw	r30, r28
    1a2a:	ef 56       	subi	r30, 0x6F	; 111
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	60 81       	ld	r22, Z
    1a30:	71 81       	ldd	r23, Z+1	; 0x01
    1a32:	82 81       	ldd	r24, Z+2	; 0x02
    1a34:	93 81       	ldd	r25, Z+3	; 0x03
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	4a e7       	ldi	r20, 0x7A	; 122
    1a3c:	54 e4       	ldi	r21, 0x44	; 68
    1a3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	fe 01       	movw	r30, r28
    1a48:	e8 57       	subi	r30, 0x78	; 120
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	80 83       	st	Z, r24
    1a4e:	91 83       	std	Z+1, r25	; 0x01
    1a50:	a2 83       	std	Z+2, r26	; 0x02
    1a52:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a54:	8e 01       	movw	r16, r28
    1a56:	0c 57       	subi	r16, 0x7C	; 124
    1a58:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	e8 57       	subi	r30, 0x78	; 120
    1a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a e7       	ldi	r20, 0x7A	; 122
    1a6e:	55 e4       	ldi	r21, 0x45	; 69
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	f8 01       	movw	r30, r16
    1a7a:	80 83       	st	Z, r24
    1a7c:	91 83       	std	Z+1, r25	; 0x01
    1a7e:	a2 83       	std	Z+2, r26	; 0x02
    1a80:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a82:	fe 01       	movw	r30, r28
    1a84:	ec 57       	subi	r30, 0x7C	; 124
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	60 81       	ld	r22, Z
    1a8a:	71 81       	ldd	r23, Z+1	; 0x01
    1a8c:	82 81       	ldd	r24, Z+2	; 0x02
    1a8e:	93 81       	ldd	r25, Z+3	; 0x03
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e8       	ldi	r20, 0x80	; 128
    1a96:	5f e3       	ldi	r21, 0x3F	; 63
    1a98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	44 f4       	brge	.+16     	; 0x1ab0 <LCD_sendCommand+0x142>
		__ticks = 1;
    1aa0:	fe 01       	movw	r30, r28
    1aa2:	ee 57       	subi	r30, 0x7E	; 126
    1aa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	91 83       	std	Z+1, r25	; 0x01
    1aac:	80 83       	st	Z, r24
    1aae:	64 c0       	rjmp	.+200    	; 0x1b78 <LCD_sendCommand+0x20a>
	else if (__tmp > 65535)
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	ec 57       	subi	r30, 0x7C	; 124
    1ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab6:	60 81       	ld	r22, Z
    1ab8:	71 81       	ldd	r23, Z+1	; 0x01
    1aba:	82 81       	ldd	r24, Z+2	; 0x02
    1abc:	93 81       	ldd	r25, Z+3	; 0x03
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	3f ef       	ldi	r19, 0xFF	; 255
    1ac2:	4f e7       	ldi	r20, 0x7F	; 127
    1ac4:	57 e4       	ldi	r21, 0x47	; 71
    1ac6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aca:	18 16       	cp	r1, r24
    1acc:	0c f0       	brlt	.+2      	; 0x1ad0 <LCD_sendCommand+0x162>
    1ace:	43 c0       	rjmp	.+134    	; 0x1b56 <LCD_sendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad0:	fe 01       	movw	r30, r28
    1ad2:	e8 57       	subi	r30, 0x78	; 120
    1ad4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad6:	60 81       	ld	r22, Z
    1ad8:	71 81       	ldd	r23, Z+1	; 0x01
    1ada:	82 81       	ldd	r24, Z+2	; 0x02
    1adc:	93 81       	ldd	r25, Z+3	; 0x03
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	40 e2       	ldi	r20, 0x20	; 32
    1ae4:	51 e4       	ldi	r21, 0x41	; 65
    1ae6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	8e 01       	movw	r16, r28
    1af0:	0e 57       	subi	r16, 0x7E	; 126
    1af2:	1f 4f       	sbci	r17, 0xFF	; 255
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	f8 01       	movw	r30, r16
    1b02:	91 83       	std	Z+1, r25	; 0x01
    1b04:	80 83       	st	Z, r24
    1b06:	1f c0       	rjmp	.+62     	; 0x1b46 <LCD_sendCommand+0x1d8>
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e0 58       	subi	r30, 0x80	; 128
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 e9       	ldi	r24, 0x90	; 144
    1b10:	91 e0       	ldi	r25, 0x01	; 1
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	fe 01       	movw	r30, r28
    1b18:	e0 58       	subi	r30, 0x80	; 128
    1b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1c:	80 81       	ld	r24, Z
    1b1e:	91 81       	ldd	r25, Z+1	; 0x01
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	f1 f7       	brne	.-4      	; 0x1b20 <LCD_sendCommand+0x1b2>
    1b24:	fe 01       	movw	r30, r28
    1b26:	e0 58       	subi	r30, 0x80	; 128
    1b28:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	de 01       	movw	r26, r28
    1b30:	ae 57       	subi	r26, 0x7E	; 126
    1b32:	bf 4f       	sbci	r27, 0xFF	; 255
    1b34:	fe 01       	movw	r30, r28
    1b36:	ee 57       	subi	r30, 0x7E	; 126
    1b38:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3a:	80 81       	ld	r24, Z
    1b3c:	91 81       	ldd	r25, Z+1	; 0x01
    1b3e:	01 97       	sbiw	r24, 0x01	; 1
    1b40:	11 96       	adiw	r26, 0x01	; 1
    1b42:	9c 93       	st	X, r25
    1b44:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	fe 01       	movw	r30, r28
    1b48:	ee 57       	subi	r30, 0x7E	; 126
    1b4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4c:	80 81       	ld	r24, Z
    1b4e:	91 81       	ldd	r25, Z+1	; 0x01
    1b50:	00 97       	sbiw	r24, 0x00	; 0
    1b52:	d1 f6       	brne	.-76     	; 0x1b08 <LCD_sendCommand+0x19a>
    1b54:	4b c0       	rjmp	.+150    	; 0x1bec <LCD_sendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b56:	8e 01       	movw	r16, r28
    1b58:	0e 57       	subi	r16, 0x7E	; 126
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	ec 57       	subi	r30, 0x7C	; 124
    1b60:	ff 4f       	sbci	r31, 0xFF	; 255
    1b62:	60 81       	ld	r22, Z
    1b64:	71 81       	ldd	r23, Z+1	; 0x01
    1b66:	82 81       	ldd	r24, Z+2	; 0x02
    1b68:	93 81       	ldd	r25, Z+3	; 0x03
    1b6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	f8 01       	movw	r30, r16
    1b74:	91 83       	std	Z+1, r25	; 0x01
    1b76:	80 83       	st	Z, r24
    1b78:	de 01       	movw	r26, r28
    1b7a:	a2 58       	subi	r26, 0x82	; 130
    1b7c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ee 57       	subi	r30, 0x7E	; 126
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	11 96       	adiw	r26, 0x01	; 1
    1b8a:	9c 93       	st	X, r25
    1b8c:	8e 93       	st	-X, r24
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e2 58       	subi	r30, 0x82	; 130
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	f1 f7       	brne	.-4      	; 0x1b98 <LCD_sendCommand+0x22a>
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e2 58       	subi	r30, 0x82	; 130
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	91 83       	std	Z+1, r25	; 0x01
    1ba4:	80 83       	st	Z, r24
    1ba6:	22 c0       	rjmp	.+68     	; 0x1bec <LCD_sendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ba8:	8e 01       	movw	r16, r28
    1baa:	04 57       	subi	r16, 0x74	; 116
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e3 57       	subi	r30, 0x73	; 115
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	60 81       	ld	r22, Z
    1bb6:	71 81       	ldd	r23, Z+1	; 0x01
    1bb8:	82 81       	ldd	r24, Z+2	; 0x02
    1bba:	93 81       	ldd	r25, Z+3	; 0x03
    1bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc0:	dc 01       	movw	r26, r24
    1bc2:	cb 01       	movw	r24, r22
    1bc4:	f8 01       	movw	r30, r16
    1bc6:	80 83       	st	Z, r24
    1bc8:	de 01       	movw	r26, r28
    1bca:	a3 58       	subi	r26, 0x83	; 131
    1bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    1bce:	fe 01       	movw	r30, r28
    1bd0:	e4 57       	subi	r30, 0x74	; 116
    1bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd4:	80 81       	ld	r24, Z
    1bd6:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e3 58       	subi	r30, 0x83	; 131
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	8a 95       	dec	r24
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_sendCommand+0x272>
    1be4:	fe 01       	movw	r30, r28
    1be6:	e3 58       	subi	r30, 0x83	; 131
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_us(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	62 e0       	ldi	r22, 0x02	; 2
    1bf0:	41 e0       	ldi	r20, 0x01	; 1
    1bf2:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e7 58       	subi	r30, 0x87	; 135
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e8       	ldi	r26, 0x80	; 128
    1c02:	bf e3       	ldi	r27, 0x3F	; 63
    1c04:	80 83       	st	Z, r24
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	a2 83       	std	Z+2, r26	; 0x02
    1c0a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c0c:	8e 01       	movw	r16, r28
    1c0e:	0b 58       	subi	r16, 0x8B	; 139
    1c10:	1f 4f       	sbci	r17, 0xFF	; 255
    1c12:	fe 01       	movw	r30, r28
    1c14:	e7 58       	subi	r30, 0x87	; 135
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	2b ea       	ldi	r18, 0xAB	; 171
    1c22:	3a ea       	ldi	r19, 0xAA	; 170
    1c24:	4a ea       	ldi	r20, 0xAA	; 170
    1c26:	50 e4       	ldi	r21, 0x40	; 64
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	f8 01       	movw	r30, r16
    1c32:	80 83       	st	Z, r24
    1c34:	91 83       	std	Z+1, r25	; 0x01
    1c36:	a2 83       	std	Z+2, r26	; 0x02
    1c38:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	eb 58       	subi	r30, 0x8B	; 139
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	60 81       	ld	r22, Z
    1c42:	71 81       	ldd	r23, Z+1	; 0x01
    1c44:	82 81       	ldd	r24, Z+2	; 0x02
    1c46:	93 81       	ldd	r25, Z+3	; 0x03
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 e8       	ldi	r20, 0x80	; 128
    1c4e:	5f e3       	ldi	r21, 0x3F	; 63
    1c50:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c54:	88 23       	and	r24, r24
    1c56:	34 f4       	brge	.+12     	; 0x1c64 <LCD_sendCommand+0x2f6>
		__ticks = 1;
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ec 58       	subi	r30, 0x8C	; 140
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	80 83       	st	Z, r24
    1c62:	e0 c0       	rjmp	.+448    	; 0x1e24 <LCD_sendCommand+0x4b6>
	else if (__tmp > 255)
    1c64:	fe 01       	movw	r30, r28
    1c66:	eb 58       	subi	r30, 0x8B	; 139
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	60 81       	ld	r22, Z
    1c6c:	71 81       	ldd	r23, Z+1	; 0x01
    1c6e:	82 81       	ldd	r24, Z+2	; 0x02
    1c70:	93 81       	ldd	r25, Z+3	; 0x03
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	53 e4       	ldi	r21, 0x43	; 67
    1c7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	0c f0       	brlt	.+2      	; 0x1c84 <LCD_sendCommand+0x316>
    1c82:	c0 c0       	rjmp	.+384    	; 0x1e04 <LCD_sendCommand+0x496>
	{
		_delay_ms(__us / 1000.0);
    1c84:	fe 01       	movw	r30, r28
    1c86:	e7 58       	subi	r30, 0x87	; 135
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	60 81       	ld	r22, Z
    1c8c:	71 81       	ldd	r23, Z+1	; 0x01
    1c8e:	82 81       	ldd	r24, Z+2	; 0x02
    1c90:	93 81       	ldd	r25, Z+3	; 0x03
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a e7       	ldi	r20, 0x7A	; 122
    1c98:	54 e4       	ldi	r21, 0x44	; 68
    1c9a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e0 59       	subi	r30, 0x90	; 144
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 83       	st	Z, r24
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	a2 83       	std	Z+2, r26	; 0x02
    1cae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb0:	8e 01       	movw	r16, r28
    1cb2:	04 59       	subi	r16, 0x94	; 148
    1cb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	e0 59       	subi	r30, 0x90	; 144
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	55 e4       	ldi	r21, 0x45	; 69
    1ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	80 83       	st	Z, r24
    1cd8:	91 83       	std	Z+1, r25	; 0x01
    1cda:	a2 83       	std	Z+2, r26	; 0x02
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cde:	fe 01       	movw	r30, r28
    1ce0:	e4 59       	subi	r30, 0x94	; 148
    1ce2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce4:	60 81       	ld	r22, Z
    1ce6:	71 81       	ldd	r23, Z+1	; 0x01
    1ce8:	82 81       	ldd	r24, Z+2	; 0x02
    1cea:	93 81       	ldd	r25, Z+3	; 0x03
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	44 f4       	brge	.+16     	; 0x1d0c <LCD_sendCommand+0x39e>
		__ticks = 1;
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e6 59       	subi	r30, 0x96	; 150
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	81 e0       	ldi	r24, 0x01	; 1
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	91 83       	std	Z+1, r25	; 0x01
    1d08:	80 83       	st	Z, r24
    1d0a:	64 c0       	rjmp	.+200    	; 0x1dd4 <LCD_sendCommand+0x466>
	else if (__tmp > 65535)
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e4 59       	subi	r30, 0x94	; 148
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	60 81       	ld	r22, Z
    1d14:	71 81       	ldd	r23, Z+1	; 0x01
    1d16:	82 81       	ldd	r24, Z+2	; 0x02
    1d18:	93 81       	ldd	r25, Z+3	; 0x03
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	3f ef       	ldi	r19, 0xFF	; 255
    1d1e:	4f e7       	ldi	r20, 0x7F	; 127
    1d20:	57 e4       	ldi	r21, 0x47	; 71
    1d22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d26:	18 16       	cp	r1, r24
    1d28:	0c f0       	brlt	.+2      	; 0x1d2c <LCD_sendCommand+0x3be>
    1d2a:	43 c0       	rjmp	.+134    	; 0x1db2 <LCD_sendCommand+0x444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	e0 59       	subi	r30, 0x90	; 144
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e2       	ldi	r20, 0x20	; 32
    1d40:	51 e4       	ldi	r21, 0x41	; 65
    1d42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8e 01       	movw	r16, r28
    1d4c:	06 59       	subi	r16, 0x96	; 150
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	bc 01       	movw	r22, r24
    1d52:	cd 01       	movw	r24, r26
    1d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d58:	dc 01       	movw	r26, r24
    1d5a:	cb 01       	movw	r24, r22
    1d5c:	f8 01       	movw	r30, r16
    1d5e:	91 83       	std	Z+1, r25	; 0x01
    1d60:	80 83       	st	Z, r24
    1d62:	1f c0       	rjmp	.+62     	; 0x1da2 <LCD_sendCommand+0x434>
    1d64:	fe 01       	movw	r30, r28
    1d66:	e8 59       	subi	r30, 0x98	; 152
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 e9       	ldi	r24, 0x90	; 144
    1d6c:	91 e0       	ldi	r25, 0x01	; 1
    1d6e:	91 83       	std	Z+1, r25	; 0x01
    1d70:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d72:	fe 01       	movw	r30, r28
    1d74:	e8 59       	subi	r30, 0x98	; 152
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 81       	ld	r24, Z
    1d7a:	91 81       	ldd	r25, Z+1	; 0x01
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <LCD_sendCommand+0x40e>
    1d80:	fe 01       	movw	r30, r28
    1d82:	e8 59       	subi	r30, 0x98	; 152
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	91 83       	std	Z+1, r25	; 0x01
    1d88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d8a:	de 01       	movw	r26, r28
    1d8c:	a6 59       	subi	r26, 0x96	; 150
    1d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1d90:	fe 01       	movw	r30, r28
    1d92:	e6 59       	subi	r30, 0x96	; 150
    1d94:	ff 4f       	sbci	r31, 0xFF	; 255
    1d96:	80 81       	ld	r24, Z
    1d98:	91 81       	ldd	r25, Z+1	; 0x01
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	11 96       	adiw	r26, 0x01	; 1
    1d9e:	9c 93       	st	X, r25
    1da0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da2:	fe 01       	movw	r30, r28
    1da4:	e6 59       	subi	r30, 0x96	; 150
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	80 81       	ld	r24, Z
    1daa:	91 81       	ldd	r25, Z+1	; 0x01
    1dac:	00 97       	sbiw	r24, 0x00	; 0
    1dae:	d1 f6       	brne	.-76     	; 0x1d64 <LCD_sendCommand+0x3f6>
    1db0:	4b c0       	rjmp	.+150    	; 0x1e48 <LCD_sendCommand+0x4da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1db2:	8e 01       	movw	r16, r28
    1db4:	06 59       	subi	r16, 0x96	; 150
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	fe 01       	movw	r30, r28
    1dba:	e4 59       	subi	r30, 0x94	; 148
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	f8 01       	movw	r30, r16
    1dd0:	91 83       	std	Z+1, r25	; 0x01
    1dd2:	80 83       	st	Z, r24
    1dd4:	de 01       	movw	r26, r28
    1dd6:	aa 59       	subi	r26, 0x9A	; 154
    1dd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e6 59       	subi	r30, 0x96	; 150
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	11 96       	adiw	r26, 0x01	; 1
    1de6:	9c 93       	st	X, r25
    1de8:	8e 93       	st	-X, r24
    1dea:	fe 01       	movw	r30, r28
    1dec:	ea 59       	subi	r30, 0x9A	; 154
    1dee:	ff 4f       	sbci	r31, 0xFF	; 255
    1df0:	80 81       	ld	r24, Z
    1df2:	91 81       	ldd	r25, Z+1	; 0x01
    1df4:	01 97       	sbiw	r24, 0x01	; 1
    1df6:	f1 f7       	brne	.-4      	; 0x1df4 <LCD_sendCommand+0x486>
    1df8:	fe 01       	movw	r30, r28
    1dfa:	ea 59       	subi	r30, 0x9A	; 154
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	91 83       	std	Z+1, r25	; 0x01
    1e00:	80 83       	st	Z, r24
    1e02:	22 c0       	rjmp	.+68     	; 0x1e48 <LCD_sendCommand+0x4da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e04:	8e 01       	movw	r16, r28
    1e06:	0c 58       	subi	r16, 0x8C	; 140
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	fe 01       	movw	r30, r28
    1e0c:	eb 58       	subi	r30, 0x8B	; 139
    1e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	f8 01       	movw	r30, r16
    1e22:	80 83       	st	Z, r24
    1e24:	de 01       	movw	r26, r28
    1e26:	ab 59       	subi	r26, 0x9B	; 155
    1e28:	bf 4f       	sbci	r27, 0xFF	; 255
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ec 58       	subi	r30, 0x8C	; 140
    1e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e30:	80 81       	ld	r24, Z
    1e32:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e34:	fe 01       	movw	r30, r28
    1e36:	eb 59       	subi	r30, 0x9B	; 155
    1e38:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8a 95       	dec	r24
    1e3e:	f1 f7       	brne	.-4      	; 0x1e3c <LCD_sendCommand+0x4ce>
    1e40:	fe 01       	movw	r30, r28
    1e42:	eb 59       	subi	r30, 0x9B	; 155
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	80 83       	st	Z, r24
	_delay_us(1);

	#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,4));
    1e48:	fe 01       	movw	r30, r28
    1e4a:	eb 56       	subi	r30, 0x6B	; 107
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	82 95       	swap	r24
    1e52:	8f 70       	andi	r24, 0x0F	; 15
    1e54:	98 2f       	mov	r25, r24
    1e56:	91 70       	andi	r25, 0x01	; 1
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	63 e0       	ldi	r22, 0x03	; 3
    1e5c:	49 2f       	mov	r20, r25
    1e5e:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,5));
    1e62:	fe 01       	movw	r30, r28
    1e64:	eb 56       	subi	r30, 0x6B	; 107
    1e66:	ff 4f       	sbci	r31, 0xFF	; 255
    1e68:	80 81       	ld	r24, Z
    1e6a:	82 95       	swap	r24
    1e6c:	86 95       	lsr	r24
    1e6e:	87 70       	andi	r24, 0x07	; 7
    1e70:	98 2f       	mov	r25, r24
    1e72:	91 70       	andi	r25, 0x01	; 1
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	64 e0       	ldi	r22, 0x04	; 4
    1e78:	49 2f       	mov	r20, r25
    1e7a:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,6));
    1e7e:	fe 01       	movw	r30, r28
    1e80:	eb 56       	subi	r30, 0x6B	; 107
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	82 95       	swap	r24
    1e88:	86 95       	lsr	r24
    1e8a:	86 95       	lsr	r24
    1e8c:	83 70       	andi	r24, 0x03	; 3
    1e8e:	98 2f       	mov	r25, r24
    1e90:	91 70       	andi	r25, 0x01	; 1
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	65 e0       	ldi	r22, 0x05	; 5
    1e96:	49 2f       	mov	r20, r25
    1e98:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,7));
    1e9c:	fe 01       	movw	r30, r28
    1e9e:	eb 56       	subi	r30, 0x6B	; 107
    1ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea2:	80 81       	ld	r24, Z
    1ea4:	98 2f       	mov	r25, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	99 27       	eor	r25, r25
    1eaa:	99 1f       	adc	r25, r25
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	66 e0       	ldi	r22, 0x06	; 6
    1eb0:	49 2f       	mov	r20, r25
    1eb2:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ef 59       	subi	r30, 0x9F	; 159
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	a0 e8       	ldi	r26, 0x80	; 128
    1ec2:	bf e3       	ldi	r27, 0x3F	; 63
    1ec4:	80 83       	st	Z, r24
    1ec6:	91 83       	std	Z+1, r25	; 0x01
    1ec8:	a2 83       	std	Z+2, r26	; 0x02
    1eca:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ecc:	8e 01       	movw	r16, r28
    1ece:	03 5a       	subi	r16, 0xA3	; 163
    1ed0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ef 59       	subi	r30, 0x9F	; 159
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	60 81       	ld	r22, Z
    1eda:	71 81       	ldd	r23, Z+1	; 0x01
    1edc:	82 81       	ldd	r24, Z+2	; 0x02
    1ede:	93 81       	ldd	r25, Z+3	; 0x03
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	4a e7       	ldi	r20, 0x7A	; 122
    1ee6:	55 e4       	ldi	r21, 0x45	; 69
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	f8 01       	movw	r30, r16
    1ef2:	80 83       	st	Z, r24
    1ef4:	91 83       	std	Z+1, r25	; 0x01
    1ef6:	a2 83       	std	Z+2, r26	; 0x02
    1ef8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1efa:	fe 01       	movw	r30, r28
    1efc:	e3 5a       	subi	r30, 0xA3	; 163
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	40 e8       	ldi	r20, 0x80	; 128
    1f0e:	5f e3       	ldi	r21, 0x3F	; 63
    1f10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f14:	88 23       	and	r24, r24
    1f16:	44 f4       	brge	.+16     	; 0x1f28 <LCD_sendCommand+0x5ba>
		__ticks = 1;
    1f18:	fe 01       	movw	r30, r28
    1f1a:	e5 5a       	subi	r30, 0xA5	; 165
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	91 83       	std	Z+1, r25	; 0x01
    1f24:	80 83       	st	Z, r24
    1f26:	64 c0       	rjmp	.+200    	; 0x1ff0 <LCD_sendCommand+0x682>
	else if (__tmp > 65535)
    1f28:	fe 01       	movw	r30, r28
    1f2a:	e3 5a       	subi	r30, 0xA3	; 163
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	60 81       	ld	r22, Z
    1f30:	71 81       	ldd	r23, Z+1	; 0x01
    1f32:	82 81       	ldd	r24, Z+2	; 0x02
    1f34:	93 81       	ldd	r25, Z+3	; 0x03
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	3f ef       	ldi	r19, 0xFF	; 255
    1f3a:	4f e7       	ldi	r20, 0x7F	; 127
    1f3c:	57 e4       	ldi	r21, 0x47	; 71
    1f3e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f42:	18 16       	cp	r1, r24
    1f44:	0c f0       	brlt	.+2      	; 0x1f48 <LCD_sendCommand+0x5da>
    1f46:	43 c0       	rjmp	.+134    	; 0x1fce <LCD_sendCommand+0x660>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f48:	fe 01       	movw	r30, r28
    1f4a:	ef 59       	subi	r30, 0x9F	; 159
    1f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4e:	60 81       	ld	r22, Z
    1f50:	71 81       	ldd	r23, Z+1	; 0x01
    1f52:	82 81       	ldd	r24, Z+2	; 0x02
    1f54:	93 81       	ldd	r25, Z+3	; 0x03
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	40 e2       	ldi	r20, 0x20	; 32
    1f5c:	51 e4       	ldi	r21, 0x41	; 65
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8e 01       	movw	r16, r28
    1f68:	05 5a       	subi	r16, 0xA5	; 165
    1f6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	f8 01       	movw	r30, r16
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	80 83       	st	Z, r24
    1f7e:	1f c0       	rjmp	.+62     	; 0x1fbe <LCD_sendCommand+0x650>
    1f80:	fe 01       	movw	r30, r28
    1f82:	e7 5a       	subi	r30, 0xA7	; 167
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 e9       	ldi	r24, 0x90	; 144
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	91 83       	std	Z+1, r25	; 0x01
    1f8c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f8e:	fe 01       	movw	r30, r28
    1f90:	e7 5a       	subi	r30, 0xA7	; 167
    1f92:	ff 4f       	sbci	r31, 0xFF	; 255
    1f94:	80 81       	ld	r24, Z
    1f96:	91 81       	ldd	r25, Z+1	; 0x01
    1f98:	01 97       	sbiw	r24, 0x01	; 1
    1f9a:	f1 f7       	brne	.-4      	; 0x1f98 <LCD_sendCommand+0x62a>
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	e7 5a       	subi	r30, 0xA7	; 167
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fa6:	de 01       	movw	r26, r28
    1fa8:	a5 5a       	subi	r26, 0xA5	; 165
    1faa:	bf 4f       	sbci	r27, 0xFF	; 255
    1fac:	fe 01       	movw	r30, r28
    1fae:	e5 5a       	subi	r30, 0xA5	; 165
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	01 97       	sbiw	r24, 0x01	; 1
    1fb8:	11 96       	adiw	r26, 0x01	; 1
    1fba:	9c 93       	st	X, r25
    1fbc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e5 5a       	subi	r30, 0xA5	; 165
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 81       	ld	r24, Z
    1fc6:	91 81       	ldd	r25, Z+1	; 0x01
    1fc8:	00 97       	sbiw	r24, 0x00	; 0
    1fca:	d1 f6       	brne	.-76     	; 0x1f80 <LCD_sendCommand+0x612>
    1fcc:	27 c0       	rjmp	.+78     	; 0x201c <LCD_sendCommand+0x6ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fce:	8e 01       	movw	r16, r28
    1fd0:	05 5a       	subi	r16, 0xA5	; 165
    1fd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	e3 5a       	subi	r30, 0xA3	; 163
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	60 81       	ld	r22, Z
    1fdc:	71 81       	ldd	r23, Z+1	; 0x01
    1fde:	82 81       	ldd	r24, Z+2	; 0x02
    1fe0:	93 81       	ldd	r25, Z+3	; 0x03
    1fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	f8 01       	movw	r30, r16
    1fec:	91 83       	std	Z+1, r25	; 0x01
    1fee:	80 83       	st	Z, r24
    1ff0:	de 01       	movw	r26, r28
    1ff2:	a9 5a       	subi	r26, 0xA9	; 169
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e5 5a       	subi	r30, 0xA5	; 165
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	91 81       	ldd	r25, Z+1	; 0x01
    2000:	8d 93       	st	X+, r24
    2002:	9c 93       	st	X, r25
    2004:	fe 01       	movw	r30, r28
    2006:	e9 5a       	subi	r30, 0xA9	; 169
    2008:	ff 4f       	sbci	r31, 0xFF	; 255
    200a:	80 81       	ld	r24, Z
    200c:	91 81       	ldd	r25, Z+1	; 0x01
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_sendCommand+0x6a0>
    2012:	fe 01       	movw	r30, r28
    2014:	e9 5a       	subi	r30, 0xA9	; 169
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	62 e0       	ldi	r22, 0x02	; 2
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    2026:	fe 01       	movw	r30, r28
    2028:	ed 5a       	subi	r30, 0xAD	; 173
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e8       	ldi	r26, 0x80	; 128
    2032:	bf e3       	ldi	r27, 0x3F	; 63
    2034:	80 83       	st	Z, r24
    2036:	91 83       	std	Z+1, r25	; 0x01
    2038:	a2 83       	std	Z+2, r26	; 0x02
    203a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    203c:	8e 01       	movw	r16, r28
    203e:	01 5b       	subi	r16, 0xB1	; 177
    2040:	1f 4f       	sbci	r17, 0xFF	; 255
    2042:	fe 01       	movw	r30, r28
    2044:	ed 5a       	subi	r30, 0xAD	; 173
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	2b ea       	ldi	r18, 0xAB	; 171
    2052:	3a ea       	ldi	r19, 0xAA	; 170
    2054:	4a ea       	ldi	r20, 0xAA	; 170
    2056:	50 e4       	ldi	r21, 0x40	; 64
    2058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205c:	dc 01       	movw	r26, r24
    205e:	cb 01       	movw	r24, r22
    2060:	f8 01       	movw	r30, r16
    2062:	80 83       	st	Z, r24
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	a2 83       	std	Z+2, r26	; 0x02
    2068:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    206a:	fe 01       	movw	r30, r28
    206c:	e1 5b       	subi	r30, 0xB1	; 177
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	60 81       	ld	r22, Z
    2072:	71 81       	ldd	r23, Z+1	; 0x01
    2074:	82 81       	ldd	r24, Z+2	; 0x02
    2076:	93 81       	ldd	r25, Z+3	; 0x03
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e8       	ldi	r20, 0x80	; 128
    207e:	5f e3       	ldi	r21, 0x3F	; 63
    2080:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2084:	88 23       	and	r24, r24
    2086:	34 f4       	brge	.+12     	; 0x2094 <LCD_sendCommand+0x726>
		__ticks = 1;
    2088:	fe 01       	movw	r30, r28
    208a:	e2 5b       	subi	r30, 0xB2	; 178
    208c:	ff 4f       	sbci	r31, 0xFF	; 255
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	80 83       	st	Z, r24
    2092:	e0 c0       	rjmp	.+448    	; 0x2254 <LCD_sendCommand+0x8e6>
	else if (__tmp > 255)
    2094:	fe 01       	movw	r30, r28
    2096:	e1 5b       	subi	r30, 0xB1	; 177
    2098:	ff 4f       	sbci	r31, 0xFF	; 255
    209a:	60 81       	ld	r22, Z
    209c:	71 81       	ldd	r23, Z+1	; 0x01
    209e:	82 81       	ldd	r24, Z+2	; 0x02
    20a0:	93 81       	ldd	r25, Z+3	; 0x03
    20a2:	20 e0       	ldi	r18, 0x00	; 0
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	4f e7       	ldi	r20, 0x7F	; 127
    20a8:	53 e4       	ldi	r21, 0x43	; 67
    20aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ae:	18 16       	cp	r1, r24
    20b0:	0c f0       	brlt	.+2      	; 0x20b4 <LCD_sendCommand+0x746>
    20b2:	c0 c0       	rjmp	.+384    	; 0x2234 <LCD_sendCommand+0x8c6>
	{
		_delay_ms(__us / 1000.0);
    20b4:	fe 01       	movw	r30, r28
    20b6:	ed 5a       	subi	r30, 0xAD	; 173
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	20 e0       	ldi	r18, 0x00	; 0
    20c4:	30 e0       	ldi	r19, 0x00	; 0
    20c6:	4a e7       	ldi	r20, 0x7A	; 122
    20c8:	54 e4       	ldi	r21, 0x44	; 68
    20ca:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20ce:	dc 01       	movw	r26, r24
    20d0:	cb 01       	movw	r24, r22
    20d2:	fe 01       	movw	r30, r28
    20d4:	e6 5b       	subi	r30, 0xB6	; 182
    20d6:	ff 4f       	sbci	r31, 0xFF	; 255
    20d8:	80 83       	st	Z, r24
    20da:	91 83       	std	Z+1, r25	; 0x01
    20dc:	a2 83       	std	Z+2, r26	; 0x02
    20de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	8e 01       	movw	r16, r28
    20e2:	0a 5b       	subi	r16, 0xBA	; 186
    20e4:	1f 4f       	sbci	r17, 0xFF	; 255
    20e6:	fe 01       	movw	r30, r28
    20e8:	e6 5b       	subi	r30, 0xB6	; 182
    20ea:	ff 4f       	sbci	r31, 0xFF	; 255
    20ec:	60 81       	ld	r22, Z
    20ee:	71 81       	ldd	r23, Z+1	; 0x01
    20f0:	82 81       	ldd	r24, Z+2	; 0x02
    20f2:	93 81       	ldd	r25, Z+3	; 0x03
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4a e7       	ldi	r20, 0x7A	; 122
    20fa:	55 e4       	ldi	r21, 0x45	; 69
    20fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2100:	dc 01       	movw	r26, r24
    2102:	cb 01       	movw	r24, r22
    2104:	f8 01       	movw	r30, r16
    2106:	80 83       	st	Z, r24
    2108:	91 83       	std	Z+1, r25	; 0x01
    210a:	a2 83       	std	Z+2, r26	; 0x02
    210c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    210e:	fe 01       	movw	r30, r28
    2110:	ea 5b       	subi	r30, 0xBA	; 186
    2112:	ff 4f       	sbci	r31, 0xFF	; 255
    2114:	60 81       	ld	r22, Z
    2116:	71 81       	ldd	r23, Z+1	; 0x01
    2118:	82 81       	ldd	r24, Z+2	; 0x02
    211a:	93 81       	ldd	r25, Z+3	; 0x03
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 e8       	ldi	r20, 0x80	; 128
    2122:	5f e3       	ldi	r21, 0x3F	; 63
    2124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2128:	88 23       	and	r24, r24
    212a:	44 f4       	brge	.+16     	; 0x213c <LCD_sendCommand+0x7ce>
		__ticks = 1;
    212c:	fe 01       	movw	r30, r28
    212e:	ec 5b       	subi	r30, 0xBC	; 188
    2130:	ff 4f       	sbci	r31, 0xFF	; 255
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	91 83       	std	Z+1, r25	; 0x01
    2138:	80 83       	st	Z, r24
    213a:	64 c0       	rjmp	.+200    	; 0x2204 <LCD_sendCommand+0x896>
	else if (__tmp > 65535)
    213c:	fe 01       	movw	r30, r28
    213e:	ea 5b       	subi	r30, 0xBA	; 186
    2140:	ff 4f       	sbci	r31, 0xFF	; 255
    2142:	60 81       	ld	r22, Z
    2144:	71 81       	ldd	r23, Z+1	; 0x01
    2146:	82 81       	ldd	r24, Z+2	; 0x02
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	3f ef       	ldi	r19, 0xFF	; 255
    214e:	4f e7       	ldi	r20, 0x7F	; 127
    2150:	57 e4       	ldi	r21, 0x47	; 71
    2152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2156:	18 16       	cp	r1, r24
    2158:	0c f0       	brlt	.+2      	; 0x215c <LCD_sendCommand+0x7ee>
    215a:	43 c0       	rjmp	.+134    	; 0x21e2 <LCD_sendCommand+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    215c:	fe 01       	movw	r30, r28
    215e:	e6 5b       	subi	r30, 0xB6	; 182
    2160:	ff 4f       	sbci	r31, 0xFF	; 255
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e2       	ldi	r20, 0x20	; 32
    2170:	51 e4       	ldi	r21, 0x41	; 65
    2172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	8e 01       	movw	r16, r28
    217c:	0c 5b       	subi	r16, 0xBC	; 188
    217e:	1f 4f       	sbci	r17, 0xFF	; 255
    2180:	bc 01       	movw	r22, r24
    2182:	cd 01       	movw	r24, r26
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	f8 01       	movw	r30, r16
    218e:	91 83       	std	Z+1, r25	; 0x01
    2190:	80 83       	st	Z, r24
    2192:	1f c0       	rjmp	.+62     	; 0x21d2 <LCD_sendCommand+0x864>
    2194:	fe 01       	movw	r30, r28
    2196:	ee 5b       	subi	r30, 0xBE	; 190
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 e9       	ldi	r24, 0x90	; 144
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	91 83       	std	Z+1, r25	; 0x01
    21a0:	80 83       	st	Z, r24
    21a2:	fe 01       	movw	r30, r28
    21a4:	ee 5b       	subi	r30, 0xBE	; 190
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 81       	ld	r24, Z
    21aa:	91 81       	ldd	r25, Z+1	; 0x01
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <LCD_sendCommand+0x83e>
    21b0:	fe 01       	movw	r30, r28
    21b2:	ee 5b       	subi	r30, 0xBE	; 190
    21b4:	ff 4f       	sbci	r31, 0xFF	; 255
    21b6:	91 83       	std	Z+1, r25	; 0x01
    21b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	de 01       	movw	r26, r28
    21bc:	ac 5b       	subi	r26, 0xBC	; 188
    21be:	bf 4f       	sbci	r27, 0xFF	; 255
    21c0:	fe 01       	movw	r30, r28
    21c2:	ec 5b       	subi	r30, 0xBC	; 188
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	80 81       	ld	r24, Z
    21c8:	91 81       	ldd	r25, Z+1	; 0x01
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	11 96       	adiw	r26, 0x01	; 1
    21ce:	9c 93       	st	X, r25
    21d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	fe 01       	movw	r30, r28
    21d4:	ec 5b       	subi	r30, 0xBC	; 188
    21d6:	ff 4f       	sbci	r31, 0xFF	; 255
    21d8:	80 81       	ld	r24, Z
    21da:	91 81       	ldd	r25, Z+1	; 0x01
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	d1 f6       	brne	.-76     	; 0x2194 <LCD_sendCommand+0x826>
    21e0:	42 c0       	rjmp	.+132    	; 0x2266 <LCD_sendCommand+0x8f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21e2:	8e 01       	movw	r16, r28
    21e4:	0c 5b       	subi	r16, 0xBC	; 188
    21e6:	1f 4f       	sbci	r17, 0xFF	; 255
    21e8:	fe 01       	movw	r30, r28
    21ea:	ea 5b       	subi	r30, 0xBA	; 186
    21ec:	ff 4f       	sbci	r31, 0xFF	; 255
    21ee:	60 81       	ld	r22, Z
    21f0:	71 81       	ldd	r23, Z+1	; 0x01
    21f2:	82 81       	ldd	r24, Z+2	; 0x02
    21f4:	93 81       	ldd	r25, Z+3	; 0x03
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	f8 01       	movw	r30, r16
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	80 83       	st	Z, r24
    2204:	de 01       	movw	r26, r28
    2206:	a0 5c       	subi	r26, 0xC0	; 192
    2208:	bf 4f       	sbci	r27, 0xFF	; 255
    220a:	fe 01       	movw	r30, r28
    220c:	ec 5b       	subi	r30, 0xBC	; 188
    220e:	ff 4f       	sbci	r31, 0xFF	; 255
    2210:	80 81       	ld	r24, Z
    2212:	91 81       	ldd	r25, Z+1	; 0x01
    2214:	11 96       	adiw	r26, 0x01	; 1
    2216:	9c 93       	st	X, r25
    2218:	8e 93       	st	-X, r24
    221a:	fe 01       	movw	r30, r28
    221c:	e0 5c       	subi	r30, 0xC0	; 192
    221e:	ff 4f       	sbci	r31, 0xFF	; 255
    2220:	80 81       	ld	r24, Z
    2222:	91 81       	ldd	r25, Z+1	; 0x01
    2224:	01 97       	sbiw	r24, 0x01	; 1
    2226:	f1 f7       	brne	.-4      	; 0x2224 <LCD_sendCommand+0x8b6>
    2228:	fe 01       	movw	r30, r28
    222a:	e0 5c       	subi	r30, 0xC0	; 192
    222c:	ff 4f       	sbci	r31, 0xFF	; 255
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	19 c0       	rjmp	.+50     	; 0x2266 <LCD_sendCommand+0x8f8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2234:	8e 01       	movw	r16, r28
    2236:	02 5b       	subi	r16, 0xB2	; 178
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	e1 5b       	subi	r30, 0xB1	; 177
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224c:	dc 01       	movw	r26, r24
    224e:	cb 01       	movw	r24, r22
    2250:	f8 01       	movw	r30, r16
    2252:	80 83       	st	Z, r24
    2254:	fe 01       	movw	r30, r28
    2256:	e2 5b       	subi	r30, 0xB2	; 178
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    225e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2260:	8a 95       	dec	r24
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_sendCommand+0x8f2>
    2264:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	62 e0       	ldi	r22, 0x02	; 2
    226a:	41 e0       	ldi	r20, 0x01	; 1
    226c:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	a0 e8       	ldi	r26, 0x80	; 128
    2276:	bf e3       	ldi	r27, 0x3F	; 63
    2278:	8b af       	std	Y+59, r24	; 0x3b
    227a:	9c af       	std	Y+60, r25	; 0x3c
    227c:	ad af       	std	Y+61, r26	; 0x3d
    227e:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2280:	6b ad       	ldd	r22, Y+59	; 0x3b
    2282:	7c ad       	ldd	r23, Y+60	; 0x3c
    2284:	8d ad       	ldd	r24, Y+61	; 0x3d
    2286:	9e ad       	ldd	r25, Y+62	; 0x3e
    2288:	2b ea       	ldi	r18, 0xAB	; 171
    228a:	3a ea       	ldi	r19, 0xAA	; 170
    228c:	4a ea       	ldi	r20, 0xAA	; 170
    228e:	50 e4       	ldi	r21, 0x40	; 64
    2290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	8f ab       	std	Y+55, r24	; 0x37
    229a:	98 af       	std	Y+56, r25	; 0x38
    229c:	a9 af       	std	Y+57, r26	; 0x39
    229e:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    22a0:	6f a9       	ldd	r22, Y+55	; 0x37
    22a2:	78 ad       	ldd	r23, Y+56	; 0x38
    22a4:	89 ad       	ldd	r24, Y+57	; 0x39
    22a6:	9a ad       	ldd	r25, Y+58	; 0x3a
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e8       	ldi	r20, 0x80	; 128
    22ae:	5f e3       	ldi	r21, 0x3F	; 63
    22b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22b4:	88 23       	and	r24, r24
    22b6:	1c f4       	brge	.+6      	; 0x22be <LCD_sendCommand+0x950>
		__ticks = 1;
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	8e ab       	std	Y+54, r24	; 0x36
    22bc:	91 c0       	rjmp	.+290    	; 0x23e0 <LCD_sendCommand+0xa72>
	else if (__tmp > 255)
    22be:	6f a9       	ldd	r22, Y+55	; 0x37
    22c0:	78 ad       	ldd	r23, Y+56	; 0x38
    22c2:	89 ad       	ldd	r24, Y+57	; 0x39
    22c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4f e7       	ldi	r20, 0x7F	; 127
    22cc:	53 e4       	ldi	r21, 0x43	; 67
    22ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22d2:	18 16       	cp	r1, r24
    22d4:	0c f0       	brlt	.+2      	; 0x22d8 <LCD_sendCommand+0x96a>
    22d6:	7b c0       	rjmp	.+246    	; 0x23ce <LCD_sendCommand+0xa60>
	{
		_delay_ms(__us / 1000.0);
    22d8:	6b ad       	ldd	r22, Y+59	; 0x3b
    22da:	7c ad       	ldd	r23, Y+60	; 0x3c
    22dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    22de:	9e ad       	ldd	r25, Y+62	; 0x3e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a e7       	ldi	r20, 0x7A	; 122
    22e6:	54 e4       	ldi	r21, 0x44	; 68
    22e8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8a ab       	std	Y+50, r24	; 0x32
    22f2:	9b ab       	std	Y+51, r25	; 0x33
    22f4:	ac ab       	std	Y+52, r26	; 0x34
    22f6:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f8:	6a a9       	ldd	r22, Y+50	; 0x32
    22fa:	7b a9       	ldd	r23, Y+51	; 0x33
    22fc:	8c a9       	ldd	r24, Y+52	; 0x34
    22fe:	9d a9       	ldd	r25, Y+53	; 0x35
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	4a e7       	ldi	r20, 0x7A	; 122
    2306:	55 e4       	ldi	r21, 0x45	; 69
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	8e a7       	std	Y+46, r24	; 0x2e
    2312:	9f a7       	std	Y+47, r25	; 0x2f
    2314:	a8 ab       	std	Y+48, r26	; 0x30
    2316:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2318:	6e a5       	ldd	r22, Y+46	; 0x2e
    231a:	7f a5       	ldd	r23, Y+47	; 0x2f
    231c:	88 a9       	ldd	r24, Y+48	; 0x30
    231e:	99 a9       	ldd	r25, Y+49	; 0x31
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e8       	ldi	r20, 0x80	; 128
    2326:	5f e3       	ldi	r21, 0x3F	; 63
    2328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    232c:	88 23       	and	r24, r24
    232e:	2c f4       	brge	.+10     	; 0x233a <LCD_sendCommand+0x9cc>
		__ticks = 1;
    2330:	81 e0       	ldi	r24, 0x01	; 1
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	9d a7       	std	Y+45, r25	; 0x2d
    2336:	8c a7       	std	Y+44, r24	; 0x2c
    2338:	3f c0       	rjmp	.+126    	; 0x23b8 <LCD_sendCommand+0xa4a>
	else if (__tmp > 65535)
    233a:	6e a5       	ldd	r22, Y+46	; 0x2e
    233c:	7f a5       	ldd	r23, Y+47	; 0x2f
    233e:	88 a9       	ldd	r24, Y+48	; 0x30
    2340:	99 a9       	ldd	r25, Y+49	; 0x31
    2342:	20 e0       	ldi	r18, 0x00	; 0
    2344:	3f ef       	ldi	r19, 0xFF	; 255
    2346:	4f e7       	ldi	r20, 0x7F	; 127
    2348:	57 e4       	ldi	r21, 0x47	; 71
    234a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    234e:	18 16       	cp	r1, r24
    2350:	4c f5       	brge	.+82     	; 0x23a4 <LCD_sendCommand+0xa36>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2352:	6a a9       	ldd	r22, Y+50	; 0x32
    2354:	7b a9       	ldd	r23, Y+51	; 0x33
    2356:	8c a9       	ldd	r24, Y+52	; 0x34
    2358:	9d a9       	ldd	r25, Y+53	; 0x35
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	40 e2       	ldi	r20, 0x20	; 32
    2360:	51 e4       	ldi	r21, 0x41	; 65
    2362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2366:	dc 01       	movw	r26, r24
    2368:	cb 01       	movw	r24, r22
    236a:	bc 01       	movw	r22, r24
    236c:	cd 01       	movw	r24, r26
    236e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2372:	dc 01       	movw	r26, r24
    2374:	cb 01       	movw	r24, r22
    2376:	9d a7       	std	Y+45, r25	; 0x2d
    2378:	8c a7       	std	Y+44, r24	; 0x2c
    237a:	0f c0       	rjmp	.+30     	; 0x239a <LCD_sendCommand+0xa2c>
    237c:	80 e9       	ldi	r24, 0x90	; 144
    237e:	91 e0       	ldi	r25, 0x01	; 1
    2380:	9b a7       	std	Y+43, r25	; 0x2b
    2382:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2384:	8a a5       	ldd	r24, Y+42	; 0x2a
    2386:	9b a5       	ldd	r25, Y+43	; 0x2b
    2388:	01 97       	sbiw	r24, 0x01	; 1
    238a:	f1 f7       	brne	.-4      	; 0x2388 <LCD_sendCommand+0xa1a>
    238c:	9b a7       	std	Y+43, r25	; 0x2b
    238e:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2390:	8c a5       	ldd	r24, Y+44	; 0x2c
    2392:	9d a5       	ldd	r25, Y+45	; 0x2d
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	9d a7       	std	Y+45, r25	; 0x2d
    2398:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    239a:	8c a5       	ldd	r24, Y+44	; 0x2c
    239c:	9d a5       	ldd	r25, Y+45	; 0x2d
    239e:	00 97       	sbiw	r24, 0x00	; 0
    23a0:	69 f7       	brne	.-38     	; 0x237c <LCD_sendCommand+0xa0e>
    23a2:	24 c0       	rjmp	.+72     	; 0x23ec <LCD_sendCommand+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23a4:	6e a5       	ldd	r22, Y+46	; 0x2e
    23a6:	7f a5       	ldd	r23, Y+47	; 0x2f
    23a8:	88 a9       	ldd	r24, Y+48	; 0x30
    23aa:	99 a9       	ldd	r25, Y+49	; 0x31
    23ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b0:	dc 01       	movw	r26, r24
    23b2:	cb 01       	movw	r24, r22
    23b4:	9d a7       	std	Y+45, r25	; 0x2d
    23b6:	8c a7       	std	Y+44, r24	; 0x2c
    23b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    23ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    23bc:	99 a7       	std	Y+41, r25	; 0x29
    23be:	88 a7       	std	Y+40, r24	; 0x28
    23c0:	88 a5       	ldd	r24, Y+40	; 0x28
    23c2:	99 a5       	ldd	r25, Y+41	; 0x29
    23c4:	01 97       	sbiw	r24, 0x01	; 1
    23c6:	f1 f7       	brne	.-4      	; 0x23c4 <LCD_sendCommand+0xa56>
    23c8:	99 a7       	std	Y+41, r25	; 0x29
    23ca:	88 a7       	std	Y+40, r24	; 0x28
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <LCD_sendCommand+0xa7e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23ce:	6f a9       	ldd	r22, Y+55	; 0x37
    23d0:	78 ad       	ldd	r23, Y+56	; 0x38
    23d2:	89 ad       	ldd	r24, Y+57	; 0x39
    23d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	8e ab       	std	Y+54, r24	; 0x36
    23e0:	8e a9       	ldd	r24, Y+54	; 0x36
    23e2:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23e4:	8f a1       	ldd	r24, Y+39	; 0x27
    23e6:	8a 95       	dec	r24
    23e8:	f1 f7       	brne	.-4      	; 0x23e6 <LCD_sendCommand+0xa78>
    23ea:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(command,0));
    23ec:	fe 01       	movw	r30, r28
    23ee:	eb 56       	subi	r30, 0x6B	; 107
    23f0:	ff 4f       	sbci	r31, 0xFF	; 255
    23f2:	80 81       	ld	r24, Z
    23f4:	98 2f       	mov	r25, r24
    23f6:	91 70       	andi	r25, 0x01	; 1
    23f8:	80 e0       	ldi	r24, 0x00	; 0
    23fa:	63 e0       	ldi	r22, 0x03	; 3
    23fc:	49 2f       	mov	r20, r25
    23fe:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(command,1));
    2402:	fe 01       	movw	r30, r28
    2404:	eb 56       	subi	r30, 0x6B	; 107
    2406:	ff 4f       	sbci	r31, 0xFF	; 255
    2408:	80 81       	ld	r24, Z
    240a:	86 95       	lsr	r24
    240c:	98 2f       	mov	r25, r24
    240e:	91 70       	andi	r25, 0x01	; 1
    2410:	80 e0       	ldi	r24, 0x00	; 0
    2412:	64 e0       	ldi	r22, 0x04	; 4
    2414:	49 2f       	mov	r20, r25
    2416:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(command,2));
    241a:	fe 01       	movw	r30, r28
    241c:	eb 56       	subi	r30, 0x6B	; 107
    241e:	ff 4f       	sbci	r31, 0xFF	; 255
    2420:	80 81       	ld	r24, Z
    2422:	86 95       	lsr	r24
    2424:	86 95       	lsr	r24
    2426:	98 2f       	mov	r25, r24
    2428:	91 70       	andi	r25, 0x01	; 1
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	65 e0       	ldi	r22, 0x05	; 5
    242e:	49 2f       	mov	r20, r25
    2430:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(command,3));
    2434:	fe 01       	movw	r30, r28
    2436:	eb 56       	subi	r30, 0x6B	; 107
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	86 95       	lsr	r24
    243e:	86 95       	lsr	r24
    2440:	86 95       	lsr	r24
    2442:	98 2f       	mov	r25, r24
    2444:	91 70       	andi	r25, 0x01	; 1
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	66 e0       	ldi	r22, 0x06	; 6
    244a:	49 2f       	mov	r20, r25
    244c:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    2450:	80 e0       	ldi	r24, 0x00	; 0
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	a0 e8       	ldi	r26, 0x80	; 128
    2456:	bf e3       	ldi	r27, 0x3F	; 63
    2458:	8b a3       	std	Y+35, r24	; 0x23
    245a:	9c a3       	std	Y+36, r25	; 0x24
    245c:	ad a3       	std	Y+37, r26	; 0x25
    245e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2460:	6b a1       	ldd	r22, Y+35	; 0x23
    2462:	7c a1       	ldd	r23, Y+36	; 0x24
    2464:	8d a1       	ldd	r24, Y+37	; 0x25
    2466:	9e a1       	ldd	r25, Y+38	; 0x26
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	4a e7       	ldi	r20, 0x7A	; 122
    246e:	55 e4       	ldi	r21, 0x45	; 69
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	8f 8f       	std	Y+31, r24	; 0x1f
    247a:	98 a3       	std	Y+32, r25	; 0x20
    247c:	a9 a3       	std	Y+33, r26	; 0x21
    247e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2480:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2482:	78 a1       	ldd	r23, Y+32	; 0x20
    2484:	89 a1       	ldd	r24, Y+33	; 0x21
    2486:	9a a1       	ldd	r25, Y+34	; 0x22
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	40 e8       	ldi	r20, 0x80	; 128
    248e:	5f e3       	ldi	r21, 0x3F	; 63
    2490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2494:	88 23       	and	r24, r24
    2496:	2c f4       	brge	.+10     	; 0x24a2 <LCD_sendCommand+0xb34>
		__ticks = 1;
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	9e 8f       	std	Y+30, r25	; 0x1e
    249e:	8d 8f       	std	Y+29, r24	; 0x1d
    24a0:	3f c0       	rjmp	.+126    	; 0x2520 <LCD_sendCommand+0xbb2>
	else if (__tmp > 65535)
    24a2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    24a4:	78 a1       	ldd	r23, Y+32	; 0x20
    24a6:	89 a1       	ldd	r24, Y+33	; 0x21
    24a8:	9a a1       	ldd	r25, Y+34	; 0x22
    24aa:	20 e0       	ldi	r18, 0x00	; 0
    24ac:	3f ef       	ldi	r19, 0xFF	; 255
    24ae:	4f e7       	ldi	r20, 0x7F	; 127
    24b0:	57 e4       	ldi	r21, 0x47	; 71
    24b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24b6:	18 16       	cp	r1, r24
    24b8:	4c f5       	brge	.+82     	; 0x250c <LCD_sendCommand+0xb9e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ba:	6b a1       	ldd	r22, Y+35	; 0x23
    24bc:	7c a1       	ldd	r23, Y+36	; 0x24
    24be:	8d a1       	ldd	r24, Y+37	; 0x25
    24c0:	9e a1       	ldd	r25, Y+38	; 0x26
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e2       	ldi	r20, 0x20	; 32
    24c8:	51 e4       	ldi	r21, 0x41	; 65
    24ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	bc 01       	movw	r22, r24
    24d4:	cd 01       	movw	r24, r26
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	9e 8f       	std	Y+30, r25	; 0x1e
    24e0:	8d 8f       	std	Y+29, r24	; 0x1d
    24e2:	0f c0       	rjmp	.+30     	; 0x2502 <LCD_sendCommand+0xb94>
    24e4:	80 e9       	ldi	r24, 0x90	; 144
    24e6:	91 e0       	ldi	r25, 0x01	; 1
    24e8:	9c 8f       	std	Y+28, r25	; 0x1c
    24ea:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f0:	01 97       	sbiw	r24, 0x01	; 1
    24f2:	f1 f7       	brne	.-4      	; 0x24f0 <LCD_sendCommand+0xb82>
    24f4:	9c 8f       	std	Y+28, r25	; 0x1c
    24f6:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	9e 8f       	std	Y+30, r25	; 0x1e
    2500:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2502:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2504:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	69 f7       	brne	.-38     	; 0x24e4 <LCD_sendCommand+0xb76>
    250a:	14 c0       	rjmp	.+40     	; 0x2534 <LCD_sendCommand+0xbc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    250c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    250e:	78 a1       	ldd	r23, Y+32	; 0x20
    2510:	89 a1       	ldd	r24, Y+33	; 0x21
    2512:	9a a1       	ldd	r25, Y+34	; 0x22
    2514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2518:	dc 01       	movw	r26, r24
    251a:	cb 01       	movw	r24, r22
    251c:	9e 8f       	std	Y+30, r25	; 0x1e
    251e:	8d 8f       	std	Y+29, r24	; 0x1d
    2520:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2522:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2524:	9a 8f       	std	Y+26, r25	; 0x1a
    2526:	89 8f       	std	Y+25, r24	; 0x19
    2528:	89 8d       	ldd	r24, Y+25	; 0x19
    252a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    252c:	01 97       	sbiw	r24, 0x01	; 1
    252e:	f1 f7       	brne	.-4      	; 0x252c <LCD_sendCommand+0xbbe>
    2530:	9a 8f       	std	Y+26, r25	; 0x1a
    2532:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

	#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2534:	80 e0       	ldi	r24, 0x00	; 0
    2536:	62 e0       	ldi	r22, 0x02	; 2
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a0 e8       	ldi	r26, 0x80	; 128
    2544:	bf e3       	ldi	r27, 0x3F	; 63
    2546:	8d 8b       	std	Y+21, r24	; 0x15
    2548:	9e 8b       	std	Y+22, r25	; 0x16
    254a:	af 8b       	std	Y+23, r26	; 0x17
    254c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    254e:	6d 89       	ldd	r22, Y+21	; 0x15
    2550:	7e 89       	ldd	r23, Y+22	; 0x16
    2552:	8f 89       	ldd	r24, Y+23	; 0x17
    2554:	98 8d       	ldd	r25, Y+24	; 0x18
    2556:	2b ea       	ldi	r18, 0xAB	; 171
    2558:	3a ea       	ldi	r19, 0xAA	; 170
    255a:	4a ea       	ldi	r20, 0xAA	; 170
    255c:	50 e4       	ldi	r21, 0x40	; 64
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	89 8b       	std	Y+17, r24	; 0x11
    2568:	9a 8b       	std	Y+18, r25	; 0x12
    256a:	ab 8b       	std	Y+19, r26	; 0x13
    256c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    256e:	69 89       	ldd	r22, Y+17	; 0x11
    2570:	7a 89       	ldd	r23, Y+18	; 0x12
    2572:	8b 89       	ldd	r24, Y+19	; 0x13
    2574:	9c 89       	ldd	r25, Y+20	; 0x14
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2582:	88 23       	and	r24, r24
    2584:	1c f4       	brge	.+6      	; 0x258c <LCD_sendCommand+0xc1e>
		__ticks = 1;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	88 8b       	std	Y+16, r24	; 0x10
    258a:	91 c0       	rjmp	.+290    	; 0x26ae <LCD_sendCommand+0xd40>
	else if (__tmp > 255)
    258c:	69 89       	ldd	r22, Y+17	; 0x11
    258e:	7a 89       	ldd	r23, Y+18	; 0x12
    2590:	8b 89       	ldd	r24, Y+19	; 0x13
    2592:	9c 89       	ldd	r25, Y+20	; 0x14
    2594:	20 e0       	ldi	r18, 0x00	; 0
    2596:	30 e0       	ldi	r19, 0x00	; 0
    2598:	4f e7       	ldi	r20, 0x7F	; 127
    259a:	53 e4       	ldi	r21, 0x43	; 67
    259c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25a0:	18 16       	cp	r1, r24
    25a2:	0c f0       	brlt	.+2      	; 0x25a6 <LCD_sendCommand+0xc38>
    25a4:	7b c0       	rjmp	.+246    	; 0x269c <LCD_sendCommand+0xd2e>
	{
		_delay_ms(__us / 1000.0);
    25a6:	6d 89       	ldd	r22, Y+21	; 0x15
    25a8:	7e 89       	ldd	r23, Y+22	; 0x16
    25aa:	8f 89       	ldd	r24, Y+23	; 0x17
    25ac:	98 8d       	ldd	r25, Y+24	; 0x18
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	4a e7       	ldi	r20, 0x7A	; 122
    25b4:	54 e4       	ldi	r21, 0x44	; 68
    25b6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	8c 87       	std	Y+12, r24	; 0x0c
    25c0:	9d 87       	std	Y+13, r25	; 0x0d
    25c2:	ae 87       	std	Y+14, r26	; 0x0e
    25c4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c6:	6c 85       	ldd	r22, Y+12	; 0x0c
    25c8:	7d 85       	ldd	r23, Y+13	; 0x0d
    25ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    25cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a e7       	ldi	r20, 0x7A	; 122
    25d4:	55 e4       	ldi	r21, 0x45	; 69
    25d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	88 87       	std	Y+8, r24	; 0x08
    25e0:	99 87       	std	Y+9, r25	; 0x09
    25e2:	aa 87       	std	Y+10, r26	; 0x0a
    25e4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    25e6:	68 85       	ldd	r22, Y+8	; 0x08
    25e8:	79 85       	ldd	r23, Y+9	; 0x09
    25ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e8       	ldi	r20, 0x80	; 128
    25f4:	5f e3       	ldi	r21, 0x3F	; 63
    25f6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fa:	88 23       	and	r24, r24
    25fc:	2c f4       	brge	.+10     	; 0x2608 <LCD_sendCommand+0xc9a>
		__ticks = 1;
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	9f 83       	std	Y+7, r25	; 0x07
    2604:	8e 83       	std	Y+6, r24	; 0x06
    2606:	3f c0       	rjmp	.+126    	; 0x2686 <LCD_sendCommand+0xd18>
	else if (__tmp > 65535)
    2608:	68 85       	ldd	r22, Y+8	; 0x08
    260a:	79 85       	ldd	r23, Y+9	; 0x09
    260c:	8a 85       	ldd	r24, Y+10	; 0x0a
    260e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	3f ef       	ldi	r19, 0xFF	; 255
    2614:	4f e7       	ldi	r20, 0x7F	; 127
    2616:	57 e4       	ldi	r21, 0x47	; 71
    2618:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261c:	18 16       	cp	r1, r24
    261e:	4c f5       	brge	.+82     	; 0x2672 <LCD_sendCommand+0xd04>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2620:	6c 85       	ldd	r22, Y+12	; 0x0c
    2622:	7d 85       	ldd	r23, Y+13	; 0x0d
    2624:	8e 85       	ldd	r24, Y+14	; 0x0e
    2626:	9f 85       	ldd	r25, Y+15	; 0x0f
    2628:	20 e0       	ldi	r18, 0x00	; 0
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	40 e2       	ldi	r20, 0x20	; 32
    262e:	51 e4       	ldi	r21, 0x41	; 65
    2630:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	bc 01       	movw	r22, r24
    263a:	cd 01       	movw	r24, r26
    263c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2640:	dc 01       	movw	r26, r24
    2642:	cb 01       	movw	r24, r22
    2644:	9f 83       	std	Y+7, r25	; 0x07
    2646:	8e 83       	std	Y+6, r24	; 0x06
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <LCD_sendCommand+0xcfa>
    264a:	80 e9       	ldi	r24, 0x90	; 144
    264c:	91 e0       	ldi	r25, 0x01	; 1
    264e:	9d 83       	std	Y+5, r25	; 0x05
    2650:	8c 83       	std	Y+4, r24	; 0x04
    2652:	8c 81       	ldd	r24, Y+4	; 0x04
    2654:	9d 81       	ldd	r25, Y+5	; 0x05
    2656:	01 97       	sbiw	r24, 0x01	; 1
    2658:	f1 f7       	brne	.-4      	; 0x2656 <LCD_sendCommand+0xce8>
    265a:	9d 83       	std	Y+5, r25	; 0x05
    265c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    265e:	8e 81       	ldd	r24, Y+6	; 0x06
    2660:	9f 81       	ldd	r25, Y+7	; 0x07
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9f 83       	std	Y+7, r25	; 0x07
    2666:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2668:	8e 81       	ldd	r24, Y+6	; 0x06
    266a:	9f 81       	ldd	r25, Y+7	; 0x07
    266c:	00 97       	sbiw	r24, 0x00	; 0
    266e:	69 f7       	brne	.-38     	; 0x264a <LCD_sendCommand+0xcdc>
    2670:	24 c0       	rjmp	.+72     	; 0x26ba <LCD_sendCommand+0xd4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2672:	68 85       	ldd	r22, Y+8	; 0x08
    2674:	79 85       	ldd	r23, Y+9	; 0x09
    2676:	8a 85       	ldd	r24, Y+10	; 0x0a
    2678:	9b 85       	ldd	r25, Y+11	; 0x0b
    267a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	9f 83       	std	Y+7, r25	; 0x07
    2684:	8e 83       	std	Y+6, r24	; 0x06
    2686:	8e 81       	ldd	r24, Y+6	; 0x06
    2688:	9f 81       	ldd	r25, Y+7	; 0x07
    268a:	9b 83       	std	Y+3, r25	; 0x03
    268c:	8a 83       	std	Y+2, r24	; 0x02
    268e:	8a 81       	ldd	r24, Y+2	; 0x02
    2690:	9b 81       	ldd	r25, Y+3	; 0x03
    2692:	01 97       	sbiw	r24, 0x01	; 1
    2694:	f1 f7       	brne	.-4      	; 0x2692 <LCD_sendCommand+0xd24>
    2696:	9b 83       	std	Y+3, r25	; 0x03
    2698:	8a 83       	std	Y+2, r24	; 0x02
    269a:	0f c0       	rjmp	.+30     	; 0x26ba <LCD_sendCommand+0xd4c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    269c:	69 89       	ldd	r22, Y+17	; 0x11
    269e:	7a 89       	ldd	r23, Y+18	; 0x12
    26a0:	8b 89       	ldd	r24, Y+19	; 0x13
    26a2:	9c 89       	ldd	r25, Y+20	; 0x14
    26a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26a8:	dc 01       	movw	r26, r24
    26aa:	cb 01       	movw	r24, r22
    26ac:	88 8b       	std	Y+16, r24	; 0x10
    26ae:	88 89       	ldd	r24, Y+16	; 0x10
    26b0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	8a 95       	dec	r24
    26b6:	f1 f7       	brne	.-4      	; 0x26b4 <LCD_sendCommand+0xd46>
    26b8:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    26ba:	cb 56       	subi	r28, 0x6B	; 107
    26bc:	df 4f       	sbci	r29, 0xFF	; 255
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	cf 91       	pop	r28
    26ca:	df 91       	pop	r29
    26cc:	1f 91       	pop	r17
    26ce:	0f 91       	pop	r16
    26d0:	08 95       	ret

000026d2 <LCD_displayCharacter>:
/*
 * Description :
 * Send the required data to the screen
 */
void LCD_displayCharacter(uint8 data)
{
    26d2:	0f 93       	push	r16
    26d4:	1f 93       	push	r17
    26d6:	df 93       	push	r29
    26d8:	cf 93       	push	r28
    26da:	cd b7       	in	r28, 0x3d	; 61
    26dc:	de b7       	in	r29, 0x3e	; 62
    26de:	c1 58       	subi	r28, 0x81	; 129
    26e0:	d0 40       	sbci	r29, 0x00	; 0
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	fe 01       	movw	r30, r28
    26ee:	ef 57       	subi	r30, 0x7F	; 127
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	80 83       	st	Z, r24
	/* 1 - set RS */
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,1);
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	61 e0       	ldi	r22, 0x01	; 1
    26f8:	41 e0       	ldi	r20, 0x01	; 1
    26fa:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    26fe:	fe 01       	movw	r30, r28
    2700:	e3 58       	subi	r30, 0x83	; 131
    2702:	ff 4f       	sbci	r31, 0xFF	; 255
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e8       	ldi	r26, 0x80	; 128
    270a:	bf e3       	ldi	r27, 0x3F	; 63
    270c:	80 83       	st	Z, r24
    270e:	91 83       	std	Z+1, r25	; 0x01
    2710:	a2 83       	std	Z+2, r26	; 0x02
    2712:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	8e 01       	movw	r16, r28
    2716:	07 58       	subi	r16, 0x87	; 135
    2718:	1f 4f       	sbci	r17, 0xFF	; 255
    271a:	fe 01       	movw	r30, r28
    271c:	e3 58       	subi	r30, 0x83	; 131
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a e7       	ldi	r20, 0x7A	; 122
    272e:	55 e4       	ldi	r21, 0x45	; 69
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	f8 01       	movw	r30, r16
    273a:	80 83       	st	Z, r24
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	a2 83       	std	Z+2, r26	; 0x02
    2740:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2742:	fe 01       	movw	r30, r28
    2744:	e7 58       	subi	r30, 0x87	; 135
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	60 81       	ld	r22, Z
    274a:	71 81       	ldd	r23, Z+1	; 0x01
    274c:	82 81       	ldd	r24, Z+2	; 0x02
    274e:	93 81       	ldd	r25, Z+3	; 0x03
    2750:	20 e0       	ldi	r18, 0x00	; 0
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	40 e8       	ldi	r20, 0x80	; 128
    2756:	5f e3       	ldi	r21, 0x3F	; 63
    2758:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    275c:	88 23       	and	r24, r24
    275e:	44 f4       	brge	.+16     	; 0x2770 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2760:	fe 01       	movw	r30, r28
    2762:	e9 58       	subi	r30, 0x89	; 137
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	91 83       	std	Z+1, r25	; 0x01
    276c:	80 83       	st	Z, r24
    276e:	64 c0       	rjmp	.+200    	; 0x2838 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2770:	fe 01       	movw	r30, r28
    2772:	e7 58       	subi	r30, 0x87	; 135
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	60 81       	ld	r22, Z
    2778:	71 81       	ldd	r23, Z+1	; 0x01
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	3f ef       	ldi	r19, 0xFF	; 255
    2782:	4f e7       	ldi	r20, 0x7F	; 127
    2784:	57 e4       	ldi	r21, 0x47	; 71
    2786:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    278a:	18 16       	cp	r1, r24
    278c:	0c f0       	brlt	.+2      	; 0x2790 <LCD_displayCharacter+0xbe>
    278e:	43 c0       	rjmp	.+134    	; 0x2816 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2790:	fe 01       	movw	r30, r28
    2792:	e3 58       	subi	r30, 0x83	; 131
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	60 81       	ld	r22, Z
    2798:	71 81       	ldd	r23, Z+1	; 0x01
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	30 e0       	ldi	r19, 0x00	; 0
    27a2:	40 e2       	ldi	r20, 0x20	; 32
    27a4:	51 e4       	ldi	r21, 0x41	; 65
    27a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	8e 01       	movw	r16, r28
    27b0:	09 58       	subi	r16, 0x89	; 137
    27b2:	1f 4f       	sbci	r17, 0xFF	; 255
    27b4:	bc 01       	movw	r22, r24
    27b6:	cd 01       	movw	r24, r26
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	f8 01       	movw	r30, r16
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	1f c0       	rjmp	.+62     	; 0x2806 <LCD_displayCharacter+0x134>
    27c8:	fe 01       	movw	r30, r28
    27ca:	eb 58       	subi	r30, 0x8B	; 139
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 e9       	ldi	r24, 0x90	; 144
    27d0:	91 e0       	ldi	r25, 0x01	; 1
    27d2:	91 83       	std	Z+1, r25	; 0x01
    27d4:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27d6:	fe 01       	movw	r30, r28
    27d8:	eb 58       	subi	r30, 0x8B	; 139
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 81       	ld	r24, Z
    27de:	91 81       	ldd	r25, Z+1	; 0x01
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <LCD_displayCharacter+0x10e>
    27e4:	fe 01       	movw	r30, r28
    27e6:	eb 58       	subi	r30, 0x8B	; 139
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ee:	de 01       	movw	r26, r28
    27f0:	a9 58       	subi	r26, 0x89	; 137
    27f2:	bf 4f       	sbci	r27, 0xFF	; 255
    27f4:	fe 01       	movw	r30, r28
    27f6:	e9 58       	subi	r30, 0x89	; 137
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	91 81       	ldd	r25, Z+1	; 0x01
    27fe:	01 97       	sbiw	r24, 0x01	; 1
    2800:	11 96       	adiw	r26, 0x01	; 1
    2802:	9c 93       	st	X, r25
    2804:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	fe 01       	movw	r30, r28
    2808:	e9 58       	subi	r30, 0x89	; 137
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	80 81       	ld	r24, Z
    280e:	91 81       	ldd	r25, Z+1	; 0x01
    2810:	00 97       	sbiw	r24, 0x00	; 0
    2812:	d1 f6       	brne	.-76     	; 0x27c8 <LCD_displayCharacter+0xf6>
    2814:	27 c0       	rjmp	.+78     	; 0x2864 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2816:	8e 01       	movw	r16, r28
    2818:	09 58       	subi	r16, 0x89	; 137
    281a:	1f 4f       	sbci	r17, 0xFF	; 255
    281c:	fe 01       	movw	r30, r28
    281e:	e7 58       	subi	r30, 0x87	; 135
    2820:	ff 4f       	sbci	r31, 0xFF	; 255
    2822:	60 81       	ld	r22, Z
    2824:	71 81       	ldd	r23, Z+1	; 0x01
    2826:	82 81       	ldd	r24, Z+2	; 0x02
    2828:	93 81       	ldd	r25, Z+3	; 0x03
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	f8 01       	movw	r30, r16
    2834:	91 83       	std	Z+1, r25	; 0x01
    2836:	80 83       	st	Z, r24
    2838:	de 01       	movw	r26, r28
    283a:	ad 58       	subi	r26, 0x8D	; 141
    283c:	bf 4f       	sbci	r27, 0xFF	; 255
    283e:	fe 01       	movw	r30, r28
    2840:	e9 58       	subi	r30, 0x89	; 137
    2842:	ff 4f       	sbci	r31, 0xFF	; 255
    2844:	80 81       	ld	r24, Z
    2846:	91 81       	ldd	r25, Z+1	; 0x01
    2848:	8d 93       	st	X+, r24
    284a:	9c 93       	st	X, r25
    284c:	fe 01       	movw	r30, r28
    284e:	ed 58       	subi	r30, 0x8D	; 141
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_displayCharacter+0x184>
    285a:	fe 01       	movw	r30, r28
    285c:	ed 58       	subi	r30, 0x8D	; 141
    285e:	ff 4f       	sbci	r31, 0xFF	; 255
    2860:	91 83       	std	Z+1, r25	; 0x01
    2862:	80 83       	st	Z, r24

	/* 2 - delay for tas*/
	_delay_ms(1);

	/* 3 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	62 e0       	ldi	r22, 0x02	; 2
    2868:	41 e0       	ldi	r20, 0x01	; 1
    286a:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    286e:	fe 01       	movw	r30, r28
    2870:	e1 59       	subi	r30, 0x91	; 145
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	a0 e8       	ldi	r26, 0x80	; 128
    287a:	bf e3       	ldi	r27, 0x3F	; 63
    287c:	80 83       	st	Z, r24
    287e:	91 83       	std	Z+1, r25	; 0x01
    2880:	a2 83       	std	Z+2, r26	; 0x02
    2882:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2884:	8e 01       	movw	r16, r28
    2886:	05 59       	subi	r16, 0x95	; 149
    2888:	1f 4f       	sbci	r17, 0xFF	; 255
    288a:	fe 01       	movw	r30, r28
    288c:	e1 59       	subi	r30, 0x91	; 145
    288e:	ff 4f       	sbci	r31, 0xFF	; 255
    2890:	60 81       	ld	r22, Z
    2892:	71 81       	ldd	r23, Z+1	; 0x01
    2894:	82 81       	ldd	r24, Z+2	; 0x02
    2896:	93 81       	ldd	r25, Z+3	; 0x03
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	4a e7       	ldi	r20, 0x7A	; 122
    289e:	55 e4       	ldi	r21, 0x45	; 69
    28a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	f8 01       	movw	r30, r16
    28aa:	80 83       	st	Z, r24
    28ac:	91 83       	std	Z+1, r25	; 0x01
    28ae:	a2 83       	std	Z+2, r26	; 0x02
    28b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28b2:	fe 01       	movw	r30, r28
    28b4:	e5 59       	subi	r30, 0x95	; 149
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	60 81       	ld	r22, Z
    28ba:	71 81       	ldd	r23, Z+1	; 0x01
    28bc:	82 81       	ldd	r24, Z+2	; 0x02
    28be:	93 81       	ldd	r25, Z+3	; 0x03
    28c0:	20 e0       	ldi	r18, 0x00	; 0
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	40 e8       	ldi	r20, 0x80	; 128
    28c6:	5f e3       	ldi	r21, 0x3F	; 63
    28c8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28cc:	88 23       	and	r24, r24
    28ce:	44 f4       	brge	.+16     	; 0x28e0 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    28d0:	fe 01       	movw	r30, r28
    28d2:	e7 59       	subi	r30, 0x97	; 151
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	91 83       	std	Z+1, r25	; 0x01
    28dc:	80 83       	st	Z, r24
    28de:	64 c0       	rjmp	.+200    	; 0x29a8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    28e0:	fe 01       	movw	r30, r28
    28e2:	e5 59       	subi	r30, 0x95	; 149
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	60 81       	ld	r22, Z
    28e8:	71 81       	ldd	r23, Z+1	; 0x01
    28ea:	82 81       	ldd	r24, Z+2	; 0x02
    28ec:	93 81       	ldd	r25, Z+3	; 0x03
    28ee:	20 e0       	ldi	r18, 0x00	; 0
    28f0:	3f ef       	ldi	r19, 0xFF	; 255
    28f2:	4f e7       	ldi	r20, 0x7F	; 127
    28f4:	57 e4       	ldi	r21, 0x47	; 71
    28f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28fa:	18 16       	cp	r1, r24
    28fc:	0c f0       	brlt	.+2      	; 0x2900 <LCD_displayCharacter+0x22e>
    28fe:	43 c0       	rjmp	.+134    	; 0x2986 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2900:	fe 01       	movw	r30, r28
    2902:	e1 59       	subi	r30, 0x91	; 145
    2904:	ff 4f       	sbci	r31, 0xFF	; 255
    2906:	60 81       	ld	r22, Z
    2908:	71 81       	ldd	r23, Z+1	; 0x01
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	93 81       	ldd	r25, Z+3	; 0x03
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	40 e2       	ldi	r20, 0x20	; 32
    2914:	51 e4       	ldi	r21, 0x41	; 65
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8e 01       	movw	r16, r28
    2920:	07 59       	subi	r16, 0x97	; 151
    2922:	1f 4f       	sbci	r17, 0xFF	; 255
    2924:	bc 01       	movw	r22, r24
    2926:	cd 01       	movw	r24, r26
    2928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    292c:	dc 01       	movw	r26, r24
    292e:	cb 01       	movw	r24, r22
    2930:	f8 01       	movw	r30, r16
    2932:	91 83       	std	Z+1, r25	; 0x01
    2934:	80 83       	st	Z, r24
    2936:	1f c0       	rjmp	.+62     	; 0x2976 <LCD_displayCharacter+0x2a4>
    2938:	fe 01       	movw	r30, r28
    293a:	e9 59       	subi	r30, 0x99	; 153
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 e9       	ldi	r24, 0x90	; 144
    2940:	91 e0       	ldi	r25, 0x01	; 1
    2942:	91 83       	std	Z+1, r25	; 0x01
    2944:	80 83       	st	Z, r24
    2946:	fe 01       	movw	r30, r28
    2948:	e9 59       	subi	r30, 0x99	; 153
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	80 81       	ld	r24, Z
    294e:	91 81       	ldd	r25, Z+1	; 0x01
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <LCD_displayCharacter+0x27e>
    2954:	fe 01       	movw	r30, r28
    2956:	e9 59       	subi	r30, 0x99	; 153
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	91 83       	std	Z+1, r25	; 0x01
    295c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295e:	de 01       	movw	r26, r28
    2960:	a7 59       	subi	r26, 0x97	; 151
    2962:	bf 4f       	sbci	r27, 0xFF	; 255
    2964:	fe 01       	movw	r30, r28
    2966:	e7 59       	subi	r30, 0x97	; 151
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	01 97       	sbiw	r24, 0x01	; 1
    2970:	11 96       	adiw	r26, 0x01	; 1
    2972:	9c 93       	st	X, r25
    2974:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2976:	fe 01       	movw	r30, r28
    2978:	e7 59       	subi	r30, 0x97	; 151
    297a:	ff 4f       	sbci	r31, 0xFF	; 255
    297c:	80 81       	ld	r24, Z
    297e:	91 81       	ldd	r25, Z+1	; 0x01
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	d1 f6       	brne	.-76     	; 0x2938 <LCD_displayCharacter+0x266>
    2984:	27 c0       	rjmp	.+78     	; 0x29d4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2986:	8e 01       	movw	r16, r28
    2988:	07 59       	subi	r16, 0x97	; 151
    298a:	1f 4f       	sbci	r17, 0xFF	; 255
    298c:	fe 01       	movw	r30, r28
    298e:	e5 59       	subi	r30, 0x95	; 149
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	82 81       	ldd	r24, Z+2	; 0x02
    2998:	93 81       	ldd	r25, Z+3	; 0x03
    299a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	f8 01       	movw	r30, r16
    29a4:	91 83       	std	Z+1, r25	; 0x01
    29a6:	80 83       	st	Z, r24
    29a8:	de 01       	movw	r26, r28
    29aa:	ab 59       	subi	r26, 0x9B	; 155
    29ac:	bf 4f       	sbci	r27, 0xFF	; 255
    29ae:	fe 01       	movw	r30, r28
    29b0:	e7 59       	subi	r30, 0x97	; 151
    29b2:	ff 4f       	sbci	r31, 0xFF	; 255
    29b4:	80 81       	ld	r24, Z
    29b6:	91 81       	ldd	r25, Z+1	; 0x01
    29b8:	8d 93       	st	X+, r24
    29ba:	9c 93       	st	X, r25
    29bc:	fe 01       	movw	r30, r28
    29be:	eb 59       	subi	r30, 0x9B	; 155
    29c0:	ff 4f       	sbci	r31, 0xFF	; 255
    29c2:	80 81       	ld	r24, Z
    29c4:	91 81       	ldd	r25, Z+1	; 0x01
    29c6:	01 97       	sbiw	r24, 0x01	; 1
    29c8:	f1 f7       	brne	.-4      	; 0x29c6 <LCD_displayCharacter+0x2f4>
    29ca:	fe 01       	movw	r30, r28
    29cc:	eb 59       	subi	r30, 0x9B	; 155
    29ce:	ff 4f       	sbci	r31, 0xFF	; 255
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
	_delay_us(1);

#elif(LCD_BIT_MODE == 4)

	/* 5 - send the 4 MSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,4));
    29d4:	fe 01       	movw	r30, r28
    29d6:	ef 57       	subi	r30, 0x7F	; 127
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	82 95       	swap	r24
    29de:	8f 70       	andi	r24, 0x0F	; 15
    29e0:	98 2f       	mov	r25, r24
    29e2:	91 70       	andi	r25, 0x01	; 1
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	63 e0       	ldi	r22, 0x03	; 3
    29e8:	49 2f       	mov	r20, r25
    29ea:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,5));
    29ee:	fe 01       	movw	r30, r28
    29f0:	ef 57       	subi	r30, 0x7F	; 127
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	80 81       	ld	r24, Z
    29f6:	82 95       	swap	r24
    29f8:	86 95       	lsr	r24
    29fa:	87 70       	andi	r24, 0x07	; 7
    29fc:	98 2f       	mov	r25, r24
    29fe:	91 70       	andi	r25, 0x01	; 1
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	64 e0       	ldi	r22, 0x04	; 4
    2a04:	49 2f       	mov	r20, r25
    2a06:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,6));
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	ef 57       	subi	r30, 0x7F	; 127
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	82 95       	swap	r24
    2a14:	86 95       	lsr	r24
    2a16:	86 95       	lsr	r24
    2a18:	83 70       	andi	r24, 0x03	; 3
    2a1a:	98 2f       	mov	r25, r24
    2a1c:	91 70       	andi	r25, 0x01	; 1
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	65 e0       	ldi	r22, 0x05	; 5
    2a22:	49 2f       	mov	r20, r25
    2a24:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,7));
    2a28:	fe 01       	movw	r30, r28
    2a2a:	ef 57       	subi	r30, 0x7F	; 127
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	80 81       	ld	r24, Z
    2a30:	98 2f       	mov	r25, r24
    2a32:	99 1f       	adc	r25, r25
    2a34:	99 27       	eor	r25, r25
    2a36:	99 1f       	adc	r25, r25
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	66 e0       	ldi	r22, 0x06	; 6
    2a3c:	49 2f       	mov	r20, r25
    2a3e:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    2a42:	fe 01       	movw	r30, r28
    2a44:	ef 59       	subi	r30, 0x9F	; 159
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	a0 e8       	ldi	r26, 0x80	; 128
    2a4e:	bf e3       	ldi	r27, 0x3F	; 63
    2a50:	80 83       	st	Z, r24
    2a52:	91 83       	std	Z+1, r25	; 0x01
    2a54:	a2 83       	std	Z+2, r26	; 0x02
    2a56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a58:	8e 01       	movw	r16, r28
    2a5a:	03 5a       	subi	r16, 0xA3	; 163
    2a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a5e:	fe 01       	movw	r30, r28
    2a60:	ef 59       	subi	r30, 0x9F	; 159
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	60 81       	ld	r22, Z
    2a66:	71 81       	ldd	r23, Z+1	; 0x01
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	93 81       	ldd	r25, Z+3	; 0x03
    2a6c:	20 e0       	ldi	r18, 0x00	; 0
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	4a e7       	ldi	r20, 0x7A	; 122
    2a72:	55 e4       	ldi	r21, 0x45	; 69
    2a74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	f8 01       	movw	r30, r16
    2a7e:	80 83       	st	Z, r24
    2a80:	91 83       	std	Z+1, r25	; 0x01
    2a82:	a2 83       	std	Z+2, r26	; 0x02
    2a84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a86:	fe 01       	movw	r30, r28
    2a88:	e3 5a       	subi	r30, 0xA3	; 163
    2a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8c:	60 81       	ld	r22, Z
    2a8e:	71 81       	ldd	r23, Z+1	; 0x01
    2a90:	82 81       	ldd	r24, Z+2	; 0x02
    2a92:	93 81       	ldd	r25, Z+3	; 0x03
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	40 e8       	ldi	r20, 0x80	; 128
    2a9a:	5f e3       	ldi	r21, 0x3F	; 63
    2a9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2aa0:	88 23       	and	r24, r24
    2aa2:	44 f4       	brge	.+16     	; 0x2ab4 <LCD_displayCharacter+0x3e2>
		__ticks = 1;
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e5 5a       	subi	r30, 0xA5	; 165
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	91 83       	std	Z+1, r25	; 0x01
    2ab0:	80 83       	st	Z, r24
    2ab2:	64 c0       	rjmp	.+200    	; 0x2b7c <LCD_displayCharacter+0x4aa>
	else if (__tmp > 65535)
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e3 5a       	subi	r30, 0xA3	; 163
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	60 81       	ld	r22, Z
    2abc:	71 81       	ldd	r23, Z+1	; 0x01
    2abe:	82 81       	ldd	r24, Z+2	; 0x02
    2ac0:	93 81       	ldd	r25, Z+3	; 0x03
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	3f ef       	ldi	r19, 0xFF	; 255
    2ac6:	4f e7       	ldi	r20, 0x7F	; 127
    2ac8:	57 e4       	ldi	r21, 0x47	; 71
    2aca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ace:	18 16       	cp	r1, r24
    2ad0:	0c f0       	brlt	.+2      	; 0x2ad4 <LCD_displayCharacter+0x402>
    2ad2:	43 c0       	rjmp	.+134    	; 0x2b5a <LCD_displayCharacter+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ef 59       	subi	r30, 0x9F	; 159
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	60 81       	ld	r22, Z
    2adc:	71 81       	ldd	r23, Z+1	; 0x01
    2ade:	82 81       	ldd	r24, Z+2	; 0x02
    2ae0:	93 81       	ldd	r25, Z+3	; 0x03
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e2       	ldi	r20, 0x20	; 32
    2ae8:	51 e4       	ldi	r21, 0x41	; 65
    2aea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aee:	dc 01       	movw	r26, r24
    2af0:	cb 01       	movw	r24, r22
    2af2:	8e 01       	movw	r16, r28
    2af4:	05 5a       	subi	r16, 0xA5	; 165
    2af6:	1f 4f       	sbci	r17, 0xFF	; 255
    2af8:	bc 01       	movw	r22, r24
    2afa:	cd 01       	movw	r24, r26
    2afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	f8 01       	movw	r30, r16
    2b06:	91 83       	std	Z+1, r25	; 0x01
    2b08:	80 83       	st	Z, r24
    2b0a:	1f c0       	rjmp	.+62     	; 0x2b4a <LCD_displayCharacter+0x478>
    2b0c:	fe 01       	movw	r30, r28
    2b0e:	e7 5a       	subi	r30, 0xA7	; 167
    2b10:	ff 4f       	sbci	r31, 0xFF	; 255
    2b12:	80 e9       	ldi	r24, 0x90	; 144
    2b14:	91 e0       	ldi	r25, 0x01	; 1
    2b16:	91 83       	std	Z+1, r25	; 0x01
    2b18:	80 83       	st	Z, r24
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	e7 5a       	subi	r30, 0xA7	; 167
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	80 81       	ld	r24, Z
    2b22:	91 81       	ldd	r25, Z+1	; 0x01
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	f1 f7       	brne	.-4      	; 0x2b24 <LCD_displayCharacter+0x452>
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e7 5a       	subi	r30, 0xA7	; 167
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	91 83       	std	Z+1, r25	; 0x01
    2b30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b32:	de 01       	movw	r26, r28
    2b34:	a5 5a       	subi	r26, 0xA5	; 165
    2b36:	bf 4f       	sbci	r27, 0xFF	; 255
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e5 5a       	subi	r30, 0xA5	; 165
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	80 81       	ld	r24, Z
    2b40:	91 81       	ldd	r25, Z+1	; 0x01
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	9c 93       	st	X, r25
    2b48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e5 5a       	subi	r30, 0xA5	; 165
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	d1 f6       	brne	.-76     	; 0x2b0c <LCD_displayCharacter+0x43a>
    2b58:	27 c0       	rjmp	.+78     	; 0x2ba8 <LCD_displayCharacter+0x4d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5a:	8e 01       	movw	r16, r28
    2b5c:	05 5a       	subi	r16, 0xA5	; 165
    2b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b60:	fe 01       	movw	r30, r28
    2b62:	e3 5a       	subi	r30, 0xA3	; 163
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	60 81       	ld	r22, Z
    2b68:	71 81       	ldd	r23, Z+1	; 0x01
    2b6a:	82 81       	ldd	r24, Z+2	; 0x02
    2b6c:	93 81       	ldd	r25, Z+3	; 0x03
    2b6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	f8 01       	movw	r30, r16
    2b78:	91 83       	std	Z+1, r25	; 0x01
    2b7a:	80 83       	st	Z, r24
    2b7c:	de 01       	movw	r26, r28
    2b7e:	a9 5a       	subi	r26, 0xA9	; 169
    2b80:	bf 4f       	sbci	r27, 0xFF	; 255
    2b82:	fe 01       	movw	r30, r28
    2b84:	e5 5a       	subi	r30, 0xA5	; 165
    2b86:	ff 4f       	sbci	r31, 0xFF	; 255
    2b88:	80 81       	ld	r24, Z
    2b8a:	91 81       	ldd	r25, Z+1	; 0x01
    2b8c:	8d 93       	st	X+, r24
    2b8e:	9c 93       	st	X, r25
    2b90:	fe 01       	movw	r30, r28
    2b92:	e9 5a       	subi	r30, 0xA9	; 169
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	80 81       	ld	r24, Z
    2b98:	91 81       	ldd	r25, Z+1	; 0x01
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <LCD_displayCharacter+0x4c8>
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e9 5a       	subi	r30, 0xA9	; 169
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	91 83       	std	Z+1, r25	; 0x01
    2ba6:	80 83       	st	Z, r24
	_delay_ms(1);

	/* 5.1 - clear enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    2ba8:	80 e0       	ldi	r24, 0x00	; 0
    2baa:	62 e0       	ldi	r22, 0x02	; 2
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	ed 5a       	subi	r30, 0xAD	; 173
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 e0       	ldi	r24, 0x00	; 0
    2bba:	90 e0       	ldi	r25, 0x00	; 0
    2bbc:	a0 e8       	ldi	r26, 0x80	; 128
    2bbe:	bf e3       	ldi	r27, 0x3F	; 63
    2bc0:	80 83       	st	Z, r24
    2bc2:	91 83       	std	Z+1, r25	; 0x01
    2bc4:	a2 83       	std	Z+2, r26	; 0x02
    2bc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2bc8:	8e 01       	movw	r16, r28
    2bca:	01 5b       	subi	r16, 0xB1	; 177
    2bcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ed 5a       	subi	r30, 0xAD	; 173
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	60 81       	ld	r22, Z
    2bd6:	71 81       	ldd	r23, Z+1	; 0x01
    2bd8:	82 81       	ldd	r24, Z+2	; 0x02
    2bda:	93 81       	ldd	r25, Z+3	; 0x03
    2bdc:	2b ea       	ldi	r18, 0xAB	; 171
    2bde:	3a ea       	ldi	r19, 0xAA	; 170
    2be0:	4a ea       	ldi	r20, 0xAA	; 170
    2be2:	50 e4       	ldi	r21, 0x40	; 64
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	f8 01       	movw	r30, r16
    2bee:	80 83       	st	Z, r24
    2bf0:	91 83       	std	Z+1, r25	; 0x01
    2bf2:	a2 83       	std	Z+2, r26	; 0x02
    2bf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	e1 5b       	subi	r30, 0xB1	; 177
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	60 81       	ld	r22, Z
    2bfe:	71 81       	ldd	r23, Z+1	; 0x01
    2c00:	82 81       	ldd	r24, Z+2	; 0x02
    2c02:	93 81       	ldd	r25, Z+3	; 0x03
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c10:	88 23       	and	r24, r24
    2c12:	34 f4       	brge	.+12     	; 0x2c20 <LCD_displayCharacter+0x54e>
		__ticks = 1;
    2c14:	fe 01       	movw	r30, r28
    2c16:	e2 5b       	subi	r30, 0xB2	; 178
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	81 e0       	ldi	r24, 0x01	; 1
    2c1c:	80 83       	st	Z, r24
    2c1e:	e0 c0       	rjmp	.+448    	; 0x2de0 <LCD_displayCharacter+0x70e>
	else if (__tmp > 255)
    2c20:	fe 01       	movw	r30, r28
    2c22:	e1 5b       	subi	r30, 0xB1	; 177
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	4f e7       	ldi	r20, 0x7F	; 127
    2c34:	53 e4       	ldi	r21, 0x43	; 67
    2c36:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3a:	18 16       	cp	r1, r24
    2c3c:	0c f0       	brlt	.+2      	; 0x2c40 <LCD_displayCharacter+0x56e>
    2c3e:	c0 c0       	rjmp	.+384    	; 0x2dc0 <LCD_displayCharacter+0x6ee>
	{
		_delay_ms(__us / 1000.0);
    2c40:	fe 01       	movw	r30, r28
    2c42:	ed 5a       	subi	r30, 0xAD	; 173
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	60 81       	ld	r22, Z
    2c48:	71 81       	ldd	r23, Z+1	; 0x01
    2c4a:	82 81       	ldd	r24, Z+2	; 0x02
    2c4c:	93 81       	ldd	r25, Z+3	; 0x03
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a e7       	ldi	r20, 0x7A	; 122
    2c54:	54 e4       	ldi	r21, 0x44	; 68
    2c56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e6 5b       	subi	r30, 0xB6	; 182
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 83       	st	Z, r24
    2c66:	91 83       	std	Z+1, r25	; 0x01
    2c68:	a2 83       	std	Z+2, r26	; 0x02
    2c6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c6c:	8e 01       	movw	r16, r28
    2c6e:	0a 5b       	subi	r16, 0xBA	; 186
    2c70:	1f 4f       	sbci	r17, 0xFF	; 255
    2c72:	fe 01       	movw	r30, r28
    2c74:	e6 5b       	subi	r30, 0xB6	; 182
    2c76:	ff 4f       	sbci	r31, 0xFF	; 255
    2c78:	60 81       	ld	r22, Z
    2c7a:	71 81       	ldd	r23, Z+1	; 0x01
    2c7c:	82 81       	ldd	r24, Z+2	; 0x02
    2c7e:	93 81       	ldd	r25, Z+3	; 0x03
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	30 e0       	ldi	r19, 0x00	; 0
    2c84:	4a e7       	ldi	r20, 0x7A	; 122
    2c86:	55 e4       	ldi	r21, 0x45	; 69
    2c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	f8 01       	movw	r30, r16
    2c92:	80 83       	st	Z, r24
    2c94:	91 83       	std	Z+1, r25	; 0x01
    2c96:	a2 83       	std	Z+2, r26	; 0x02
    2c98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c9a:	fe 01       	movw	r30, r28
    2c9c:	ea 5b       	subi	r30, 0xBA	; 186
    2c9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca0:	60 81       	ld	r22, Z
    2ca2:	71 81       	ldd	r23, Z+1	; 0x01
    2ca4:	82 81       	ldd	r24, Z+2	; 0x02
    2ca6:	93 81       	ldd	r25, Z+3	; 0x03
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	44 f4       	brge	.+16     	; 0x2cc8 <LCD_displayCharacter+0x5f6>
		__ticks = 1;
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ec 5b       	subi	r30, 0xBC	; 188
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	91 83       	std	Z+1, r25	; 0x01
    2cc4:	80 83       	st	Z, r24
    2cc6:	64 c0       	rjmp	.+200    	; 0x2d90 <LCD_displayCharacter+0x6be>
	else if (__tmp > 65535)
    2cc8:	fe 01       	movw	r30, r28
    2cca:	ea 5b       	subi	r30, 0xBA	; 186
    2ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cce:	60 81       	ld	r22, Z
    2cd0:	71 81       	ldd	r23, Z+1	; 0x01
    2cd2:	82 81       	ldd	r24, Z+2	; 0x02
    2cd4:	93 81       	ldd	r25, Z+3	; 0x03
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	0c f0       	brlt	.+2      	; 0x2ce8 <LCD_displayCharacter+0x616>
    2ce6:	43 c0       	rjmp	.+134    	; 0x2d6e <LCD_displayCharacter+0x69c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce8:	fe 01       	movw	r30, r28
    2cea:	e6 5b       	subi	r30, 0xB6	; 182
    2cec:	ff 4f       	sbci	r31, 0xFF	; 255
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	51 e4       	ldi	r21, 0x41	; 65
    2cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	8e 01       	movw	r16, r28
    2d08:	0c 5b       	subi	r16, 0xBC	; 188
    2d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d0c:	bc 01       	movw	r22, r24
    2d0e:	cd 01       	movw	r24, r26
    2d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d14:	dc 01       	movw	r26, r24
    2d16:	cb 01       	movw	r24, r22
    2d18:	f8 01       	movw	r30, r16
    2d1a:	91 83       	std	Z+1, r25	; 0x01
    2d1c:	80 83       	st	Z, r24
    2d1e:	1f c0       	rjmp	.+62     	; 0x2d5e <LCD_displayCharacter+0x68c>
    2d20:	fe 01       	movw	r30, r28
    2d22:	ee 5b       	subi	r30, 0xBE	; 190
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 e9       	ldi	r24, 0x90	; 144
    2d28:	91 e0       	ldi	r25, 0x01	; 1
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	80 83       	st	Z, r24
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ee 5b       	subi	r30, 0xBE	; 190
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	80 81       	ld	r24, Z
    2d36:	91 81       	ldd	r25, Z+1	; 0x01
    2d38:	01 97       	sbiw	r24, 0x01	; 1
    2d3a:	f1 f7       	brne	.-4      	; 0x2d38 <LCD_displayCharacter+0x666>
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ee 5b       	subi	r30, 0xBE	; 190
    2d40:	ff 4f       	sbci	r31, 0xFF	; 255
    2d42:	91 83       	std	Z+1, r25	; 0x01
    2d44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d46:	de 01       	movw	r26, r28
    2d48:	ac 5b       	subi	r26, 0xBC	; 188
    2d4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	ec 5b       	subi	r30, 0xBC	; 188
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	01 97       	sbiw	r24, 0x01	; 1
    2d58:	11 96       	adiw	r26, 0x01	; 1
    2d5a:	9c 93       	st	X, r25
    2d5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d5e:	fe 01       	movw	r30, r28
    2d60:	ec 5b       	subi	r30, 0xBC	; 188
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	80 81       	ld	r24, Z
    2d66:	91 81       	ldd	r25, Z+1	; 0x01
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	d1 f6       	brne	.-76     	; 0x2d20 <LCD_displayCharacter+0x64e>
    2d6c:	42 c0       	rjmp	.+132    	; 0x2df2 <LCD_displayCharacter+0x720>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d6e:	8e 01       	movw	r16, r28
    2d70:	0c 5b       	subi	r16, 0xBC	; 188
    2d72:	1f 4f       	sbci	r17, 0xFF	; 255
    2d74:	fe 01       	movw	r30, r28
    2d76:	ea 5b       	subi	r30, 0xBA	; 186
    2d78:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7a:	60 81       	ld	r22, Z
    2d7c:	71 81       	ldd	r23, Z+1	; 0x01
    2d7e:	82 81       	ldd	r24, Z+2	; 0x02
    2d80:	93 81       	ldd	r25, Z+3	; 0x03
    2d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	91 83       	std	Z+1, r25	; 0x01
    2d8e:	80 83       	st	Z, r24
    2d90:	de 01       	movw	r26, r28
    2d92:	a0 5c       	subi	r26, 0xC0	; 192
    2d94:	bf 4f       	sbci	r27, 0xFF	; 255
    2d96:	fe 01       	movw	r30, r28
    2d98:	ec 5b       	subi	r30, 0xBC	; 188
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	80 81       	ld	r24, Z
    2d9e:	91 81       	ldd	r25, Z+1	; 0x01
    2da0:	11 96       	adiw	r26, 0x01	; 1
    2da2:	9c 93       	st	X, r25
    2da4:	8e 93       	st	-X, r24
    2da6:	fe 01       	movw	r30, r28
    2da8:	e0 5c       	subi	r30, 0xC0	; 192
    2daa:	ff 4f       	sbci	r31, 0xFF	; 255
    2dac:	80 81       	ld	r24, Z
    2dae:	91 81       	ldd	r25, Z+1	; 0x01
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <LCD_displayCharacter+0x6de>
    2db4:	fe 01       	movw	r30, r28
    2db6:	e0 5c       	subi	r30, 0xC0	; 192
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	91 83       	std	Z+1, r25	; 0x01
    2dbc:	80 83       	st	Z, r24
    2dbe:	19 c0       	rjmp	.+50     	; 0x2df2 <LCD_displayCharacter+0x720>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2dc0:	8e 01       	movw	r16, r28
    2dc2:	02 5b       	subi	r16, 0xB2	; 178
    2dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e1 5b       	subi	r30, 0xB1	; 177
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	60 81       	ld	r22, Z
    2dce:	71 81       	ldd	r23, Z+1	; 0x01
    2dd0:	82 81       	ldd	r24, Z+2	; 0x02
    2dd2:	93 81       	ldd	r25, Z+3	; 0x03
    2dd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	f8 01       	movw	r30, r16
    2dde:	80 83       	st	Z, r24
    2de0:	fe 01       	movw	r30, r28
    2de2:	e2 5b       	subi	r30, 0xB2	; 178
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2dea:	8f ad       	ldd	r24, Y+63	; 0x3f
    2dec:	8a 95       	dec	r24
    2dee:	f1 f7       	brne	.-4      	; 0x2dec <LCD_displayCharacter+0x71a>
    2df0:	8f af       	std	Y+63, r24	; 0x3f

	/* 5.2 - delay for 1us*/
	_delay_us(1);

	/* 6.1 - set enable */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,1);
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	62 e0       	ldi	r22, 0x02	; 2
    2df6:	41 e0       	ldi	r20, 0x01	; 1
    2df8:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	90 e0       	ldi	r25, 0x00	; 0
    2e00:	a0 e8       	ldi	r26, 0x80	; 128
    2e02:	bf e3       	ldi	r27, 0x3F	; 63
    2e04:	8b af       	std	Y+59, r24	; 0x3b
    2e06:	9c af       	std	Y+60, r25	; 0x3c
    2e08:	ad af       	std	Y+61, r26	; 0x3d
    2e0a:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e0c:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e0e:	7c ad       	ldd	r23, Y+60	; 0x3c
    2e10:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e12:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e14:	2b ea       	ldi	r18, 0xAB	; 171
    2e16:	3a ea       	ldi	r19, 0xAA	; 170
    2e18:	4a ea       	ldi	r20, 0xAA	; 170
    2e1a:	50 e4       	ldi	r21, 0x40	; 64
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	8f ab       	std	Y+55, r24	; 0x37
    2e26:	98 af       	std	Y+56, r25	; 0x38
    2e28:	a9 af       	std	Y+57, r26	; 0x39
    2e2a:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2e2c:	6f a9       	ldd	r22, Y+55	; 0x37
    2e2e:	78 ad       	ldd	r23, Y+56	; 0x38
    2e30:	89 ad       	ldd	r24, Y+57	; 0x39
    2e32:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	1c f4       	brge	.+6      	; 0x2e4a <LCD_displayCharacter+0x778>
		__ticks = 1;
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	8e ab       	std	Y+54, r24	; 0x36
    2e48:	91 c0       	rjmp	.+290    	; 0x2f6c <LCD_displayCharacter+0x89a>
	else if (__tmp > 255)
    2e4a:	6f a9       	ldd	r22, Y+55	; 0x37
    2e4c:	78 ad       	ldd	r23, Y+56	; 0x38
    2e4e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e50:	9a ad       	ldd	r25, Y+58	; 0x3a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	53 e4       	ldi	r21, 0x43	; 67
    2e5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	0c f0       	brlt	.+2      	; 0x2e64 <LCD_displayCharacter+0x792>
    2e62:	7b c0       	rjmp	.+246    	; 0x2f5a <LCD_displayCharacter+0x888>
	{
		_delay_ms(__us / 1000.0);
    2e64:	6b ad       	ldd	r22, Y+59	; 0x3b
    2e66:	7c ad       	ldd	r23, Y+60	; 0x3c
    2e68:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e6a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	4a e7       	ldi	r20, 0x7A	; 122
    2e72:	54 e4       	ldi	r21, 0x44	; 68
    2e74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	8a ab       	std	Y+50, r24	; 0x32
    2e7e:	9b ab       	std	Y+51, r25	; 0x33
    2e80:	ac ab       	std	Y+52, r26	; 0x34
    2e82:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e84:	6a a9       	ldd	r22, Y+50	; 0x32
    2e86:	7b a9       	ldd	r23, Y+51	; 0x33
    2e88:	8c a9       	ldd	r24, Y+52	; 0x34
    2e8a:	9d a9       	ldd	r25, Y+53	; 0x35
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	4a e7       	ldi	r20, 0x7A	; 122
    2e92:	55 e4       	ldi	r21, 0x45	; 69
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	8e a7       	std	Y+46, r24	; 0x2e
    2e9e:	9f a7       	std	Y+47, r25	; 0x2f
    2ea0:	a8 ab       	std	Y+48, r26	; 0x30
    2ea2:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2ea4:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ea6:	7f a5       	ldd	r23, Y+47	; 0x2f
    2ea8:	88 a9       	ldd	r24, Y+48	; 0x30
    2eaa:	99 a9       	ldd	r25, Y+49	; 0x31
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	2c f4       	brge	.+10     	; 0x2ec6 <LCD_displayCharacter+0x7f4>
		__ticks = 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9d a7       	std	Y+45, r25	; 0x2d
    2ec2:	8c a7       	std	Y+44, r24	; 0x2c
    2ec4:	3f c0       	rjmp	.+126    	; 0x2f44 <LCD_displayCharacter+0x872>
	else if (__tmp > 65535)
    2ec6:	6e a5       	ldd	r22, Y+46	; 0x2e
    2ec8:	7f a5       	ldd	r23, Y+47	; 0x2f
    2eca:	88 a9       	ldd	r24, Y+48	; 0x30
    2ecc:	99 a9       	ldd	r25, Y+49	; 0x31
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	3f ef       	ldi	r19, 0xFF	; 255
    2ed2:	4f e7       	ldi	r20, 0x7F	; 127
    2ed4:	57 e4       	ldi	r21, 0x47	; 71
    2ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eda:	18 16       	cp	r1, r24
    2edc:	4c f5       	brge	.+82     	; 0x2f30 <LCD_displayCharacter+0x85e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ede:	6a a9       	ldd	r22, Y+50	; 0x32
    2ee0:	7b a9       	ldd	r23, Y+51	; 0x33
    2ee2:	8c a9       	ldd	r24, Y+52	; 0x34
    2ee4:	9d a9       	ldd	r25, Y+53	; 0x35
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9d a7       	std	Y+45, r25	; 0x2d
    2f04:	8c a7       	std	Y+44, r24	; 0x2c
    2f06:	0f c0       	rjmp	.+30     	; 0x2f26 <LCD_displayCharacter+0x854>
    2f08:	80 e9       	ldi	r24, 0x90	; 144
    2f0a:	91 e0       	ldi	r25, 0x01	; 1
    2f0c:	9b a7       	std	Y+43, r25	; 0x2b
    2f0e:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f10:	8a a5       	ldd	r24, Y+42	; 0x2a
    2f12:	9b a5       	ldd	r25, Y+43	; 0x2b
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <LCD_displayCharacter+0x842>
    2f18:	9b a7       	std	Y+43, r25	; 0x2b
    2f1a:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f1e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	9d a7       	std	Y+45, r25	; 0x2d
    2f24:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f26:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f28:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	69 f7       	brne	.-38     	; 0x2f08 <LCD_displayCharacter+0x836>
    2f2e:	24 c0       	rjmp	.+72     	; 0x2f78 <LCD_displayCharacter+0x8a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f30:	6e a5       	ldd	r22, Y+46	; 0x2e
    2f32:	7f a5       	ldd	r23, Y+47	; 0x2f
    2f34:	88 a9       	ldd	r24, Y+48	; 0x30
    2f36:	99 a9       	ldd	r25, Y+49	; 0x31
    2f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9d a7       	std	Y+45, r25	; 0x2d
    2f42:	8c a7       	std	Y+44, r24	; 0x2c
    2f44:	8c a5       	ldd	r24, Y+44	; 0x2c
    2f46:	9d a5       	ldd	r25, Y+45	; 0x2d
    2f48:	99 a7       	std	Y+41, r25	; 0x29
    2f4a:	88 a7       	std	Y+40, r24	; 0x28
    2f4c:	88 a5       	ldd	r24, Y+40	; 0x28
    2f4e:	99 a5       	ldd	r25, Y+41	; 0x29
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <LCD_displayCharacter+0x87e>
    2f54:	99 a7       	std	Y+41, r25	; 0x29
    2f56:	88 a7       	std	Y+40, r24	; 0x28
    2f58:	0f c0       	rjmp	.+30     	; 0x2f78 <LCD_displayCharacter+0x8a6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f5a:	6f a9       	ldd	r22, Y+55	; 0x37
    2f5c:	78 ad       	ldd	r23, Y+56	; 0x38
    2f5e:	89 ad       	ldd	r24, Y+57	; 0x39
    2f60:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	8e ab       	std	Y+54, r24	; 0x36
    2f6c:	8e a9       	ldd	r24, Y+54	; 0x36
    2f6e:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f70:	8f a1       	ldd	r24, Y+39	; 0x27
    2f72:	8a 95       	dec	r24
    2f74:	f1 f7       	brne	.-4      	; 0x2f72 <LCD_displayCharacter+0x8a0>
    2f76:	8f a3       	std	Y+39, r24	; 0x27

	/* 6.2 - delay for 1us*/
	_delay_us(1);

	/* 6.3 - send the 4 LSBs of command*/
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN0_ID,GET_BIT(data,0));
    2f78:	fe 01       	movw	r30, r28
    2f7a:	ef 57       	subi	r30, 0x7F	; 127
    2f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7e:	80 81       	ld	r24, Z
    2f80:	98 2f       	mov	r25, r24
    2f82:	91 70       	andi	r25, 0x01	; 1
    2f84:	80 e0       	ldi	r24, 0x00	; 0
    2f86:	63 e0       	ldi	r22, 0x03	; 3
    2f88:	49 2f       	mov	r20, r25
    2f8a:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN1_ID,GET_BIT(data,1));
    2f8e:	fe 01       	movw	r30, r28
    2f90:	ef 57       	subi	r30, 0x7F	; 127
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	86 95       	lsr	r24
    2f98:	98 2f       	mov	r25, r24
    2f9a:	91 70       	andi	r25, 0x01	; 1
    2f9c:	80 e0       	ldi	r24, 0x00	; 0
    2f9e:	64 e0       	ldi	r22, 0x04	; 4
    2fa0:	49 2f       	mov	r20, r25
    2fa2:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN2_ID,GET_BIT(data,2));
    2fa6:	fe 01       	movw	r30, r28
    2fa8:	ef 57       	subi	r30, 0x7F	; 127
    2faa:	ff 4f       	sbci	r31, 0xFF	; 255
    2fac:	80 81       	ld	r24, Z
    2fae:	86 95       	lsr	r24
    2fb0:	86 95       	lsr	r24
    2fb2:	98 2f       	mov	r25, r24
    2fb4:	91 70       	andi	r25, 0x01	; 1
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	65 e0       	ldi	r22, 0x05	; 5
    2fba:	49 2f       	mov	r20, r25
    2fbc:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DATA_PIN3_ID,GET_BIT(data,3));
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	ef 57       	subi	r30, 0x7F	; 127
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 81       	ld	r24, Z
    2fc8:	86 95       	lsr	r24
    2fca:	86 95       	lsr	r24
    2fcc:	86 95       	lsr	r24
    2fce:	98 2f       	mov	r25, r24
    2fd0:	91 70       	andi	r25, 0x01	; 1
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	66 e0       	ldi	r22, 0x06	; 6
    2fd6:	49 2f       	mov	r20, r25
    2fd8:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	a0 e8       	ldi	r26, 0x80	; 128
    2fe2:	bf e3       	ldi	r27, 0x3F	; 63
    2fe4:	8b a3       	std	Y+35, r24	; 0x23
    2fe6:	9c a3       	std	Y+36, r25	; 0x24
    2fe8:	ad a3       	std	Y+37, r26	; 0x25
    2fea:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fec:	6b a1       	ldd	r22, Y+35	; 0x23
    2fee:	7c a1       	ldd	r23, Y+36	; 0x24
    2ff0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ff2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	4a e7       	ldi	r20, 0x7A	; 122
    2ffa:	55 e4       	ldi	r21, 0x45	; 69
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	8f 8f       	std	Y+31, r24	; 0x1f
    3006:	98 a3       	std	Y+32, r25	; 0x20
    3008:	a9 a3       	std	Y+33, r26	; 0x21
    300a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    300c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    300e:	78 a1       	ldd	r23, Y+32	; 0x20
    3010:	89 a1       	ldd	r24, Y+33	; 0x21
    3012:	9a a1       	ldd	r25, Y+34	; 0x22
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	5f e3       	ldi	r21, 0x3F	; 63
    301c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3020:	88 23       	and	r24, r24
    3022:	2c f4       	brge	.+10     	; 0x302e <LCD_displayCharacter+0x95c>
		__ticks = 1;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	9e 8f       	std	Y+30, r25	; 0x1e
    302a:	8d 8f       	std	Y+29, r24	; 0x1d
    302c:	3f c0       	rjmp	.+126    	; 0x30ac <LCD_displayCharacter+0x9da>
	else if (__tmp > 65535)
    302e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3030:	78 a1       	ldd	r23, Y+32	; 0x20
    3032:	89 a1       	ldd	r24, Y+33	; 0x21
    3034:	9a a1       	ldd	r25, Y+34	; 0x22
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	4f e7       	ldi	r20, 0x7F	; 127
    303c:	57 e4       	ldi	r21, 0x47	; 71
    303e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3042:	18 16       	cp	r1, r24
    3044:	4c f5       	brge	.+82     	; 0x3098 <LCD_displayCharacter+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3046:	6b a1       	ldd	r22, Y+35	; 0x23
    3048:	7c a1       	ldd	r23, Y+36	; 0x24
    304a:	8d a1       	ldd	r24, Y+37	; 0x25
    304c:	9e a1       	ldd	r25, Y+38	; 0x26
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e2       	ldi	r20, 0x20	; 32
    3054:	51 e4       	ldi	r21, 0x41	; 65
    3056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9e 8f       	std	Y+30, r25	; 0x1e
    306c:	8d 8f       	std	Y+29, r24	; 0x1d
    306e:	0f c0       	rjmp	.+30     	; 0x308e <LCD_displayCharacter+0x9bc>
    3070:	80 e9       	ldi	r24, 0x90	; 144
    3072:	91 e0       	ldi	r25, 0x01	; 1
    3074:	9c 8f       	std	Y+28, r25	; 0x1c
    3076:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    307a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <LCD_displayCharacter+0x9aa>
    3080:	9c 8f       	std	Y+28, r25	; 0x1c
    3082:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3084:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3086:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	9e 8f       	std	Y+30, r25	; 0x1e
    308c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3090:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	69 f7       	brne	.-38     	; 0x3070 <LCD_displayCharacter+0x99e>
    3096:	14 c0       	rjmp	.+40     	; 0x30c0 <LCD_displayCharacter+0x9ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3098:	6f 8d       	ldd	r22, Y+31	; 0x1f
    309a:	78 a1       	ldd	r23, Y+32	; 0x20
    309c:	89 a1       	ldd	r24, Y+33	; 0x21
    309e:	9a a1       	ldd	r25, Y+34	; 0x22
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9e 8f       	std	Y+30, r25	; 0x1e
    30aa:	8d 8f       	std	Y+29, r24	; 0x1d
    30ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30b0:	9a 8f       	std	Y+26, r25	; 0x1a
    30b2:	89 8f       	std	Y+25, r24	; 0x19
    30b4:	89 8d       	ldd	r24, Y+25	; 0x19
    30b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCD_displayCharacter+0x9e6>
    30bc:	9a 8f       	std	Y+26, r25	; 0x1a
    30be:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(1);

#endif

	/* 7 - clear enable*/
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,0);
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	62 e0       	ldi	r22, 0x02	; 2
    30c4:	40 e0       	ldi	r20, 0x00	; 0
    30c6:	0e 94 49 09 	call	0x1292	; 0x1292 <GPIO_writePin>
    30ca:	80 e0       	ldi	r24, 0x00	; 0
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	a0 e8       	ldi	r26, 0x80	; 128
    30d0:	bf e3       	ldi	r27, 0x3F	; 63
    30d2:	8d 8b       	std	Y+21, r24	; 0x15
    30d4:	9e 8b       	std	Y+22, r25	; 0x16
    30d6:	af 8b       	std	Y+23, r26	; 0x17
    30d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    30da:	6d 89       	ldd	r22, Y+21	; 0x15
    30dc:	7e 89       	ldd	r23, Y+22	; 0x16
    30de:	8f 89       	ldd	r24, Y+23	; 0x17
    30e0:	98 8d       	ldd	r25, Y+24	; 0x18
    30e2:	2b ea       	ldi	r18, 0xAB	; 171
    30e4:	3a ea       	ldi	r19, 0xAA	; 170
    30e6:	4a ea       	ldi	r20, 0xAA	; 170
    30e8:	50 e4       	ldi	r21, 0x40	; 64
    30ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	89 8b       	std	Y+17, r24	; 0x11
    30f4:	9a 8b       	std	Y+18, r25	; 0x12
    30f6:	ab 8b       	std	Y+19, r26	; 0x13
    30f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30fa:	69 89       	ldd	r22, Y+17	; 0x11
    30fc:	7a 89       	ldd	r23, Y+18	; 0x12
    30fe:	8b 89       	ldd	r24, Y+19	; 0x13
    3100:	9c 89       	ldd	r25, Y+20	; 0x14
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	30 e0       	ldi	r19, 0x00	; 0
    3106:	40 e8       	ldi	r20, 0x80	; 128
    3108:	5f e3       	ldi	r21, 0x3F	; 63
    310a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    310e:	88 23       	and	r24, r24
    3110:	1c f4       	brge	.+6      	; 0x3118 <LCD_displayCharacter+0xa46>
		__ticks = 1;
    3112:	81 e0       	ldi	r24, 0x01	; 1
    3114:	88 8b       	std	Y+16, r24	; 0x10
    3116:	91 c0       	rjmp	.+290    	; 0x323a <LCD_displayCharacter+0xb68>
	else if (__tmp > 255)
    3118:	69 89       	ldd	r22, Y+17	; 0x11
    311a:	7a 89       	ldd	r23, Y+18	; 0x12
    311c:	8b 89       	ldd	r24, Y+19	; 0x13
    311e:	9c 89       	ldd	r25, Y+20	; 0x14
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	4f e7       	ldi	r20, 0x7F	; 127
    3126:	53 e4       	ldi	r21, 0x43	; 67
    3128:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    312c:	18 16       	cp	r1, r24
    312e:	0c f0       	brlt	.+2      	; 0x3132 <LCD_displayCharacter+0xa60>
    3130:	7b c0       	rjmp	.+246    	; 0x3228 <LCD_displayCharacter+0xb56>
	{
		_delay_ms(__us / 1000.0);
    3132:	6d 89       	ldd	r22, Y+21	; 0x15
    3134:	7e 89       	ldd	r23, Y+22	; 0x16
    3136:	8f 89       	ldd	r24, Y+23	; 0x17
    3138:	98 8d       	ldd	r25, Y+24	; 0x18
    313a:	20 e0       	ldi	r18, 0x00	; 0
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	4a e7       	ldi	r20, 0x7A	; 122
    3140:	54 e4       	ldi	r21, 0x44	; 68
    3142:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	8c 87       	std	Y+12, r24	; 0x0c
    314c:	9d 87       	std	Y+13, r25	; 0x0d
    314e:	ae 87       	std	Y+14, r26	; 0x0e
    3150:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	6c 85       	ldd	r22, Y+12	; 0x0c
    3154:	7d 85       	ldd	r23, Y+13	; 0x0d
    3156:	8e 85       	ldd	r24, Y+14	; 0x0e
    3158:	9f 85       	ldd	r25, Y+15	; 0x0f
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a e7       	ldi	r20, 0x7A	; 122
    3160:	55 e4       	ldi	r21, 0x45	; 69
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	88 87       	std	Y+8, r24	; 0x08
    316c:	99 87       	std	Y+9, r25	; 0x09
    316e:	aa 87       	std	Y+10, r26	; 0x0a
    3170:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3172:	68 85       	ldd	r22, Y+8	; 0x08
    3174:	79 85       	ldd	r23, Y+9	; 0x09
    3176:	8a 85       	ldd	r24, Y+10	; 0x0a
    3178:	9b 85       	ldd	r25, Y+11	; 0x0b
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	2c f4       	brge	.+10     	; 0x3194 <LCD_displayCharacter+0xac2>
		__ticks = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9f 83       	std	Y+7, r25	; 0x07
    3190:	8e 83       	std	Y+6, r24	; 0x06
    3192:	3f c0       	rjmp	.+126    	; 0x3212 <LCD_displayCharacter+0xb40>
	else if (__tmp > 65535)
    3194:	68 85       	ldd	r22, Y+8	; 0x08
    3196:	79 85       	ldd	r23, Y+9	; 0x09
    3198:	8a 85       	ldd	r24, Y+10	; 0x0a
    319a:	9b 85       	ldd	r25, Y+11	; 0x0b
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	3f ef       	ldi	r19, 0xFF	; 255
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	57 e4       	ldi	r21, 0x47	; 71
    31a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	4c f5       	brge	.+82     	; 0x31fe <LCD_displayCharacter+0xb2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    31ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    31b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    31b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9f 83       	std	Y+7, r25	; 0x07
    31d2:	8e 83       	std	Y+6, r24	; 0x06
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <LCD_displayCharacter+0xb22>
    31d6:	80 e9       	ldi	r24, 0x90	; 144
    31d8:	91 e0       	ldi	r25, 0x01	; 1
    31da:	9d 83       	std	Y+5, r25	; 0x05
    31dc:	8c 83       	std	Y+4, r24	; 0x04
    31de:	8c 81       	ldd	r24, Y+4	; 0x04
    31e0:	9d 81       	ldd	r25, Y+5	; 0x05
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <LCD_displayCharacter+0xb10>
    31e6:	9d 83       	std	Y+5, r25	; 0x05
    31e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8e 81       	ldd	r24, Y+6	; 0x06
    31ec:	9f 81       	ldd	r25, Y+7	; 0x07
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9f 83       	std	Y+7, r25	; 0x07
    31f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8e 81       	ldd	r24, Y+6	; 0x06
    31f6:	9f 81       	ldd	r25, Y+7	; 0x07
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <LCD_displayCharacter+0xb04>
    31fc:	24 c0       	rjmp	.+72     	; 0x3246 <LCD_displayCharacter+0xb74>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	68 85       	ldd	r22, Y+8	; 0x08
    3200:	79 85       	ldd	r23, Y+9	; 0x09
    3202:	8a 85       	ldd	r24, Y+10	; 0x0a
    3204:	9b 85       	ldd	r25, Y+11	; 0x0b
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	9f 83       	std	Y+7, r25	; 0x07
    3210:	8e 83       	std	Y+6, r24	; 0x06
    3212:	8e 81       	ldd	r24, Y+6	; 0x06
    3214:	9f 81       	ldd	r25, Y+7	; 0x07
    3216:	9b 83       	std	Y+3, r25	; 0x03
    3218:	8a 83       	std	Y+2, r24	; 0x02
    321a:	8a 81       	ldd	r24, Y+2	; 0x02
    321c:	9b 81       	ldd	r25, Y+3	; 0x03
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <LCD_displayCharacter+0xb4c>
    3222:	9b 83       	std	Y+3, r25	; 0x03
    3224:	8a 83       	std	Y+2, r24	; 0x02
    3226:	0f c0       	rjmp	.+30     	; 0x3246 <LCD_displayCharacter+0xb74>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3228:	69 89       	ldd	r22, Y+17	; 0x11
    322a:	7a 89       	ldd	r23, Y+18	; 0x12
    322c:	8b 89       	ldd	r24, Y+19	; 0x13
    322e:	9c 89       	ldd	r25, Y+20	; 0x14
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	88 8b       	std	Y+16, r24	; 0x10
    323a:	88 89       	ldd	r24, Y+16	; 0x10
    323c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	8a 95       	dec	r24
    3242:	f1 f7       	brne	.-4      	; 0x3240 <LCD_displayCharacter+0xb6e>
    3244:	89 83       	std	Y+1, r24	; 0x01

	/* 8 - delay 1us*/
	_delay_us(1);
}
    3246:	cf 57       	subi	r28, 0x7F	; 127
    3248:	df 4f       	sbci	r29, 0xFF	; 255
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	cf 91       	pop	r28
    3256:	df 91       	pop	r29
    3258:	1f 91       	pop	r17
    325a:	0f 91       	pop	r16
    325c:	08 95       	ret

0000325e <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
    325e:	df 93       	push	r29
    3260:	cf 93       	push	r28
    3262:	00 d0       	rcall	.+0      	; 0x3264 <LCD_displayString+0x6>
    3264:	0f 92       	push	r0
    3266:	cd b7       	in	r28, 0x3d	; 61
    3268:	de b7       	in	r29, 0x3e	; 62
    326a:	9b 83       	std	Y+3, r25	; 0x03
    326c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    326e:	19 82       	std	Y+1, r1	; 0x01
    3270:	0e c0       	rjmp	.+28     	; 0x328e <LCD_displayString+0x30>
		LCD_displayCharacter(str[i]);
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	fc 01       	movw	r30, r24
    327e:	e2 0f       	add	r30, r18
    3280:	f3 1f       	adc	r31, r19
    3282:	80 81       	ld	r24, Z
    3284:	0e 94 69 13 	call	0x26d2	; 0x26d2 <LCD_displayCharacter>
 * Display the required string on the screen
 */
void LCD_displayString(const char *str)
{
	uint8 i;
	for(i=0;str[i]!='\0';i++)
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	8f 5f       	subi	r24, 0xFF	; 255
    328c:	89 83       	std	Y+1, r24	; 0x01
    328e:	89 81       	ldd	r24, Y+1	; 0x01
    3290:	28 2f       	mov	r18, r24
    3292:	30 e0       	ldi	r19, 0x00	; 0
    3294:	8a 81       	ldd	r24, Y+2	; 0x02
    3296:	9b 81       	ldd	r25, Y+3	; 0x03
    3298:	fc 01       	movw	r30, r24
    329a:	e2 0f       	add	r30, r18
    329c:	f3 1f       	adc	r31, r19
    329e:	80 81       	ld	r24, Z
    32a0:	88 23       	and	r24, r24
    32a2:	39 f7       	brne	.-50     	; 0x3272 <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
}
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	0f 90       	pop	r0
    32aa:	cf 91       	pop	r28
    32ac:	df 91       	pop	r29
    32ae:	08 95       	ret

000032b0 <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    32b0:	df 93       	push	r29
    32b2:	cf 93       	push	r28
    32b4:	cd b7       	in	r28, 0x3d	; 61
    32b6:	de b7       	in	r29, 0x3e	; 62
    32b8:	62 97       	sbiw	r28, 0x12	; 18
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	9a 8b       	std	Y+18, r25	; 0x12
    32c6:	89 8b       	std	Y+17, r24	; 0x11
   char arr[16];

   /* store the integer number to arr & 10 is for decimal numbering system*/
   itoa(data,arr,10);
    32c8:	89 89       	ldd	r24, Y+17	; 0x11
    32ca:	9a 89       	ldd	r25, Y+18	; 0x12
    32cc:	9e 01       	movw	r18, r28
    32ce:	2f 5f       	subi	r18, 0xFF	; 255
    32d0:	3f 4f       	sbci	r19, 0xFF	; 255
    32d2:	b9 01       	movw	r22, r18
    32d4:	4a e0       	ldi	r20, 0x0A	; 10
    32d6:	50 e0       	ldi	r21, 0x00	; 0
    32d8:	0e 94 22 1a 	call	0x3444	; 0x3444 <itoa>

   LCD_displayString(arr);
    32dc:	ce 01       	movw	r24, r28
    32de:	01 96       	adiw	r24, 0x01	; 1
    32e0:	0e 94 2f 19 	call	0x325e	; 0x325e <LCD_displayString>
}
    32e4:	62 96       	adiw	r28, 0x12	; 18
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	08 95       	ret

000032f6 <LCD_moveCursor>:
/*
 * Description :
 * A function which change the cursor position according to given row and column
 */
void LCD_moveCursor(uint8 row, uint8 column)
{
    32f6:	df 93       	push	r29
    32f8:	cf 93       	push	r28
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <LCD_moveCursor+0x6>
    32fc:	00 d0       	rcall	.+0      	; 0x32fe <LCD_moveCursor+0x8>
    32fe:	0f 92       	push	r0
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	8a 83       	std	Y+2, r24	; 0x02
    3306:	6b 83       	std	Y+3, r22	; 0x03
	 * fourth row position is 0x50 + column
	 * and then we should set the MSB of position by
	 * or it with 0b10000000 which is 0x80
	 */
	uint8 position;
	switch(row)
    3308:	8a 81       	ldd	r24, Y+2	; 0x02
    330a:	28 2f       	mov	r18, r24
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	3d 83       	std	Y+5, r19	; 0x05
    3310:	2c 83       	std	Y+4, r18	; 0x04
    3312:	8c 81       	ldd	r24, Y+4	; 0x04
    3314:	9d 81       	ldd	r25, Y+5	; 0x05
    3316:	81 30       	cpi	r24, 0x01	; 1
    3318:	91 05       	cpc	r25, r1
    331a:	c1 f0       	breq	.+48     	; 0x334c <LCD_moveCursor+0x56>
    331c:	2c 81       	ldd	r18, Y+4	; 0x04
    331e:	3d 81       	ldd	r19, Y+5	; 0x05
    3320:	22 30       	cpi	r18, 0x02	; 2
    3322:	31 05       	cpc	r19, r1
    3324:	2c f4       	brge	.+10     	; 0x3330 <LCD_moveCursor+0x3a>
    3326:	8c 81       	ldd	r24, Y+4	; 0x04
    3328:	9d 81       	ldd	r25, Y+5	; 0x05
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	61 f0       	breq	.+24     	; 0x3346 <LCD_moveCursor+0x50>
    332e:	19 c0       	rjmp	.+50     	; 0x3362 <LCD_moveCursor+0x6c>
    3330:	2c 81       	ldd	r18, Y+4	; 0x04
    3332:	3d 81       	ldd	r19, Y+5	; 0x05
    3334:	22 30       	cpi	r18, 0x02	; 2
    3336:	31 05       	cpc	r19, r1
    3338:	69 f0       	breq	.+26     	; 0x3354 <LCD_moveCursor+0x5e>
    333a:	8c 81       	ldd	r24, Y+4	; 0x04
    333c:	9d 81       	ldd	r25, Y+5	; 0x05
    333e:	83 30       	cpi	r24, 0x03	; 3
    3340:	91 05       	cpc	r25, r1
    3342:	61 f0       	breq	.+24     	; 0x335c <LCD_moveCursor+0x66>
    3344:	0e c0       	rjmp	.+28     	; 0x3362 <LCD_moveCursor+0x6c>
	{
	case 0 :
		position=0x00+column;
    3346:	8b 81       	ldd	r24, Y+3	; 0x03
    3348:	89 83       	std	Y+1, r24	; 0x01
    334a:	0b c0       	rjmp	.+22     	; 0x3362 <LCD_moveCursor+0x6c>
		break;
	case 1 :
		position=0x40+column;
    334c:	8b 81       	ldd	r24, Y+3	; 0x03
    334e:	80 5c       	subi	r24, 0xC0	; 192
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	07 c0       	rjmp	.+14     	; 0x3362 <LCD_moveCursor+0x6c>
		break;
	case 2 :
		position=0x10+column;
    3354:	8b 81       	ldd	r24, Y+3	; 0x03
    3356:	80 5f       	subi	r24, 0xF0	; 240
    3358:	89 83       	std	Y+1, r24	; 0x01
    335a:	03 c0       	rjmp	.+6      	; 0x3362 <LCD_moveCursor+0x6c>
		break;
	case 3 :
		position=0x40+column;
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	80 5c       	subi	r24, 0xC0	; 192
    3360:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(position|LCD_SET_CURSOR_LOCATION);
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	80 68       	ori	r24, 0x80	; 128
    3366:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_sendCommand>
}
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	cf 91       	pop	r28
    3376:	df 91       	pop	r29
    3378:	08 95       	ret

0000337a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    337a:	df 93       	push	r29
    337c:	cf 93       	push	r28
    337e:	00 d0       	rcall	.+0      	; 0x3380 <LCD_displayStringRowColumn+0x6>
    3380:	00 d0       	rcall	.+0      	; 0x3382 <LCD_displayStringRowColumn+0x8>
    3382:	cd b7       	in	r28, 0x3d	; 61
    3384:	de b7       	in	r29, 0x3e	; 62
    3386:	89 83       	std	Y+1, r24	; 0x01
    3388:	6a 83       	std	Y+2, r22	; 0x02
    338a:	5c 83       	std	Y+4, r21	; 0x04
    338c:	4b 83       	std	Y+3, r20	; 0x03
	/*Move cursor to that position*/
	LCD_moveCursor(row,col);
    338e:	89 81       	ldd	r24, Y+1	; 0x01
    3390:	6a 81       	ldd	r22, Y+2	; 0x02
    3392:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <LCD_moveCursor>

	/* Display the string*/
	LCD_displayString(Str);
    3396:	8b 81       	ldd	r24, Y+3	; 0x03
    3398:	9c 81       	ldd	r25, Y+4	; 0x04
    339a:	0e 94 2f 19 	call	0x325e	; 0x325e <LCD_displayString>
}
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	0f 90       	pop	r0
    33a4:	0f 90       	pop	r0
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <LCD_clearScreen>:
/*
 * Description :
 * remove the text displayed on the screen
 */
void LCD_clearScreen()
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_SCREEN);
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	0e 94 b7 0c 	call	0x196e	; 0x196e <LCD_sendCommand>
}
    33ba:	cf 91       	pop	r28
    33bc:	df 91       	pop	r29
    33be:	08 95       	ret

000033c0 <main>:
 *      Author: dell
 */
#include"app.h"

#include <util/delay.h>
int main(){
    33c0:	df 93       	push	r29
    33c2:	cf 93       	push	r28
    33c4:	cd b7       	in	r28, 0x3d	; 61
    33c6:	de b7       	in	r29, 0x3e	; 62
	    init_function();
    33c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <init_function>
		while(1){
			init_function();
    33cc:	0e 94 4f 06 	call	0xc9e	; 0xc9e <init_function>
			welcome_screen();
    33d0:	0e 94 5a 06 	call	0xcb4	; 0xcb4 <welcome_screen>
    33d4:	fb cf       	rjmp	.-10     	; 0x33cc <main+0xc>

000033d6 <__prologue_saves__>:
    33d6:	2f 92       	push	r2
    33d8:	3f 92       	push	r3
    33da:	4f 92       	push	r4
    33dc:	5f 92       	push	r5
    33de:	6f 92       	push	r6
    33e0:	7f 92       	push	r7
    33e2:	8f 92       	push	r8
    33e4:	9f 92       	push	r9
    33e6:	af 92       	push	r10
    33e8:	bf 92       	push	r11
    33ea:	cf 92       	push	r12
    33ec:	df 92       	push	r13
    33ee:	ef 92       	push	r14
    33f0:	ff 92       	push	r15
    33f2:	0f 93       	push	r16
    33f4:	1f 93       	push	r17
    33f6:	cf 93       	push	r28
    33f8:	df 93       	push	r29
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	ca 1b       	sub	r28, r26
    3400:	db 0b       	sbc	r29, r27
    3402:	0f b6       	in	r0, 0x3f	; 63
    3404:	f8 94       	cli
    3406:	de bf       	out	0x3e, r29	; 62
    3408:	0f be       	out	0x3f, r0	; 63
    340a:	cd bf       	out	0x3d, r28	; 61
    340c:	09 94       	ijmp

0000340e <__epilogue_restores__>:
    340e:	2a 88       	ldd	r2, Y+18	; 0x12
    3410:	39 88       	ldd	r3, Y+17	; 0x11
    3412:	48 88       	ldd	r4, Y+16	; 0x10
    3414:	5f 84       	ldd	r5, Y+15	; 0x0f
    3416:	6e 84       	ldd	r6, Y+14	; 0x0e
    3418:	7d 84       	ldd	r7, Y+13	; 0x0d
    341a:	8c 84       	ldd	r8, Y+12	; 0x0c
    341c:	9b 84       	ldd	r9, Y+11	; 0x0b
    341e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3420:	b9 84       	ldd	r11, Y+9	; 0x09
    3422:	c8 84       	ldd	r12, Y+8	; 0x08
    3424:	df 80       	ldd	r13, Y+7	; 0x07
    3426:	ee 80       	ldd	r14, Y+6	; 0x06
    3428:	fd 80       	ldd	r15, Y+5	; 0x05
    342a:	0c 81       	ldd	r16, Y+4	; 0x04
    342c:	1b 81       	ldd	r17, Y+3	; 0x03
    342e:	aa 81       	ldd	r26, Y+2	; 0x02
    3430:	b9 81       	ldd	r27, Y+1	; 0x01
    3432:	ce 0f       	add	r28, r30
    3434:	d1 1d       	adc	r29, r1
    3436:	0f b6       	in	r0, 0x3f	; 63
    3438:	f8 94       	cli
    343a:	de bf       	out	0x3e, r29	; 62
    343c:	0f be       	out	0x3f, r0	; 63
    343e:	cd bf       	out	0x3d, r28	; 61
    3440:	ed 01       	movw	r28, r26
    3442:	08 95       	ret

00003444 <itoa>:
    3444:	fb 01       	movw	r30, r22
    3446:	9f 01       	movw	r18, r30
    3448:	e8 94       	clt
    344a:	42 30       	cpi	r20, 0x02	; 2
    344c:	c4 f0       	brlt	.+48     	; 0x347e <itoa+0x3a>
    344e:	45 32       	cpi	r20, 0x25	; 37
    3450:	b4 f4       	brge	.+44     	; 0x347e <itoa+0x3a>
    3452:	4a 30       	cpi	r20, 0x0A	; 10
    3454:	29 f4       	brne	.+10     	; 0x3460 <itoa+0x1c>
    3456:	97 fb       	bst	r25, 7
    3458:	1e f4       	brtc	.+6      	; 0x3460 <itoa+0x1c>
    345a:	90 95       	com	r25
    345c:	81 95       	neg	r24
    345e:	9f 4f       	sbci	r25, 0xFF	; 255
    3460:	64 2f       	mov	r22, r20
    3462:	77 27       	eor	r23, r23
    3464:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <__udivmodhi4>
    3468:	80 5d       	subi	r24, 0xD0	; 208
    346a:	8a 33       	cpi	r24, 0x3A	; 58
    346c:	0c f0       	brlt	.+2      	; 0x3470 <itoa+0x2c>
    346e:	89 5d       	subi	r24, 0xD9	; 217
    3470:	81 93       	st	Z+, r24
    3472:	cb 01       	movw	r24, r22
    3474:	00 97       	sbiw	r24, 0x00	; 0
    3476:	a1 f7       	brne	.-24     	; 0x3460 <itoa+0x1c>
    3478:	16 f4       	brtc	.+4      	; 0x347e <itoa+0x3a>
    347a:	5d e2       	ldi	r21, 0x2D	; 45
    347c:	51 93       	st	Z+, r21
    347e:	10 82       	st	Z, r1
    3480:	c9 01       	movw	r24, r18
    3482:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <strrev>

00003486 <strrev>:
    3486:	dc 01       	movw	r26, r24
    3488:	fc 01       	movw	r30, r24
    348a:	67 2f       	mov	r22, r23
    348c:	71 91       	ld	r23, Z+
    348e:	77 23       	and	r23, r23
    3490:	e1 f7       	brne	.-8      	; 0x348a <strrev+0x4>
    3492:	32 97       	sbiw	r30, 0x02	; 2
    3494:	04 c0       	rjmp	.+8      	; 0x349e <strrev+0x18>
    3496:	7c 91       	ld	r23, X
    3498:	6d 93       	st	X+, r22
    349a:	70 83       	st	Z, r23
    349c:	62 91       	ld	r22, -Z
    349e:	ae 17       	cp	r26, r30
    34a0:	bf 07       	cpc	r27, r31
    34a2:	c8 f3       	brcs	.-14     	; 0x3496 <strrev+0x10>
    34a4:	08 95       	ret

000034a6 <__udivmodhi4>:
    34a6:	aa 1b       	sub	r26, r26
    34a8:	bb 1b       	sub	r27, r27
    34aa:	51 e1       	ldi	r21, 0x11	; 17
    34ac:	07 c0       	rjmp	.+14     	; 0x34bc <__udivmodhi4_ep>

000034ae <__udivmodhi4_loop>:
    34ae:	aa 1f       	adc	r26, r26
    34b0:	bb 1f       	adc	r27, r27
    34b2:	a6 17       	cp	r26, r22
    34b4:	b7 07       	cpc	r27, r23
    34b6:	10 f0       	brcs	.+4      	; 0x34bc <__udivmodhi4_ep>
    34b8:	a6 1b       	sub	r26, r22
    34ba:	b7 0b       	sbc	r27, r23

000034bc <__udivmodhi4_ep>:
    34bc:	88 1f       	adc	r24, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	5a 95       	dec	r21
    34c2:	a9 f7       	brne	.-22     	; 0x34ae <__udivmodhi4_loop>
    34c4:	80 95       	com	r24
    34c6:	90 95       	com	r25
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	08 95       	ret

000034ce <_exit>:
    34ce:	f8 94       	cli

000034d0 <__stop_program>:
    34d0:	ff cf       	rjmp	.-2      	; 0x34d0 <__stop_program>
